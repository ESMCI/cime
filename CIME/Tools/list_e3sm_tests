#!/usr/bin/env python3

"""
List e3sm test suites. Can be used to show what's being tested. Can just
list tested grids, compsets, etc.
"""

from standard_script_setup import *
from CIME import utils
from CIME import get_tests

import sys
import argparse
import logging


logger = logging.getLogger(__name__)


def parse_command_line():
    description = """This tool will print all test suite names.

If any test suite names are provided, then all `term` values for the tests in the suites will be listed.

Examples
--------
>>> %(prog)s
e3sm_developer
cime_tiny

>>> %(prog)s e3sm_developer
ERS.f19_g16_rx1.A.docker_gnu
NCK.f19_g16_rx1.A.docker_gnu

>>> %(prog)s -t compsets e3sm_developer
A
F2010
I1850ELM

>>> %(prog)s -t grids e3sm_developer
f19_g16_rx1"""

    parser = argparse.ArgumentParser(
        description=description, formatter_class=argparse.RawDescriptionHelpFormatter
    )

    utils.setup_standard_logging_options(parser)

    parser.add_argument(
        "suites",
        nargs="*",
        help="The test suites to list.",
    )

    parser.add_argument(
        "-t",
        "--term",
        choices=("compsets", "grids", "testcases", "tests"),
        default="tests",
        help="The term from a testname to print.",
    )

    kwargs = vars(parser.parse_args())

    utils.configure_logging(**kwargs)

    return kwargs


def list_tests(term, suites, **_):
    things = set()

    for suite in suites:
        tests = get_tests.get_test_suite(suite)

        if term == "tests":
            things |= set(tests)
        else:
            for test in tests:
                testcase, _, grid, compset, *_ = utils.parse_test_name(test)

                if term == "compsets":
                    things.add(compset)
                elif term == "grids":
                    things.add(grid)
                elif term == "testcases":
                    things.add(testcase)

    for item in sorted(things):
        print(item)

    logger.info(f"Found {len(things)!r} {term}")


def _main_func():
    args = parse_command_line()

    if len(args["suites"]) == 0:
        test_suites = sorted(get_tests.get_test_suites())

        for suite in test_suites:
            print(suite)

        logger.info(f"Found {len(test_suites)!r} test suites")
    else:
        list_tests(**args)


if __name__ == "__main__":
    _main_func()
