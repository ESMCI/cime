#!/usr/bin/env python2
"""
template to create a case short term archiving script
"""

import sys, os
_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

import time
from standard_script_setup import *
from CIME.XML.standard_module_setup import *
from CIME.case import Case
from CIME.utils import expect, get_model, run_cmd, does_file_have_string, appendStatus

logger = logging.getLogger(__name__)

# Batch system directives
{{ batchdirectives }}

###############################################################################
def parse_command_line(args):
###############################################################################

    CIME.utils.get_model()

    parser = argparse.ArgumentParser()

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    args = parser.parse_args()

    CIME.utils.handle_standard_logging_options(args)

    if args.caseroot is not None:
        os.chdir(args.caseroot)

###############################################################################
def _main_func():
###############################################################################

    parse_command_line(sys.argv)

    case = Case()

    caseroot = case.get_value("CASEROOT")

    # max number of threads needed by scripts
    os.environ["maxthrds"] = 1

    # document start
    appendStatus("lt_archive starting",caseroot=caseroot,sfile="CaseStatus")

    # determine status of run and short term archiving
    runComplete = does_file_have_string(os.path.join(caseroot, "CaseStatus"),
                                        "run SUCCESSFUL")
    staComplete = does_file_have_string(os.path.join(caseroot, "stArchiveStatus"),
                                        "st_archive_complete")

    # set up envrionment vars and call the lt_archive.sh script
    if runComplete and staComplete:
        os.environ["DOUT_S_ROOT"] = case.get_value("DOUT_S_ROOT")
        os.environ["DOUT_L_MSROOT"] = case.get_value("DOUT_L_MSROOT")
	os.environ["DOUT_L_HPSS_ACCNT"] = case.get_value("DOUT_L_HPSS_ACCNT")

	lid = time.strftime("%y%m%d-%H%M%S")
        lt_archive_args = {{ lt_archive_args }}
        cmd = os.path.join(caseroot, "Tools/lt_archive.sh") \
            + lt_archive_args + "ltArchiveStatus." + lid + " 2>&1"
        run_cmd(cmd, from_dir=caseroot)
    else:
        expect(False,
               "lt_archive: run or st_archive is not yet complete or was not successful."
               "Unable to perform long term archive...")

    # document completion
    appendStatus("lt_archive completed" ,caseroot=caseroot, sfile="CaseStatus")

###############################################################################

if __name__ == "__main__":
    _main_func()
