#!/usr/bin/env python2

# Batch system directives
{{ batchdirectives }}

"""
Script to controls short term archiving tasks after the model run is
successfully completed.  It is called after the case.run script
successfully completes and the DOUT_S variable is set to TRUE. It
can also be run as a stand-alone script.

ENV_ARCHIVE.XML SCHEMA AND DOCUMENT TYPE DEFINITION (DTD)

    The st_archive script depends on the env_archive.xml file in the
    $CASEROOT directory created by create_newcase. The env_archive.xml
    file can be edited by hand in a standard text editor to provide
    directives for controlling the behavior of the short term
    archiver.

    For CESM, file naming convention in the env_archive.xml adheres to
    the conventions defined in
    http://www.cesm.ucar.edu/models/cesm2.0/filename_conventions_cesm.html

    You can view the env_archive.xml file and check the XML validity
    after editing by running "case.st_archive --input".

    The attributes in the <comp_archive_spec> XML tag definitions are
    used to define how the files in the RUNDIR are distributed into
    corresponding subdirectories in the DOUT_S_ROOT archive
    location and whether or not copies of files with specified
    suffices are preserved in the RUNDIR in addition to being copied
    to the DOUT_S_ROOT archive locations.

    There are multiple <comp_archive_spec> markup tags defined with
    nested <file_extension> elements included as part of a well formed
    XML <comp_archive_spec> markup tag defintion.

    When making changes to the env_archive.xml file in a CASEROOT, it
    is recommended that the XML be validated against the xml schema
    defintion document in the
    CIMEROOT/cime_config/xml_schemas/archive.xsd. For systems that
    have the xmllint utility installed, execute the following:

    > cd CASEROOT
    > xmllint -schema CIMEROOT/cime_config/xml_schemas/archive.xsd env_archive.xml

    If the env_archive.xml file contains valid XML code, then output
    from this command should be a complete listing of the
    env_archive.xml file followed by the line:

    env_archive.xml validates

    Any errors in the XML will be reported by the xmllint command and
    should be resolved before running the case.st_archive script in either
    the case run script or as a stand-alone script.

    The XML markup tag defintions in < >, data type definitions
    denoted in [ ], and "|" separated valid options in ( ) for the
    env_archive.xml file are defined as follows:

    <components>
       <comp_archive_spec name="model component name">                              (see 1)
          <rootdir>[string]</rootdir>                                               (see 2)
             <files>                                                                (see 3)
                <file_extension regex_suffix="[regular expression string]">         (see 4)
                   <subdir>[string]</subdir>                                        (see 5)
                   <keep_last_in_rundir>[string] (true|false)</keep_last_in_rundir> (see 6)
                </file_extension>
             </files>
         <rootdir> 
      </comp_archive_spec>
   </components>

   (1) model component name.  note - cam\\* and clm\\? are historical
   for CAM and CLM model components
   (2) Component root directory name to be created under DOUT_S_ROOT 
   (3) list of file_extensions for given component
   (4) Perl regular expression specification for "globbing" filenames
   for matching. Run the command "case.st_archive -input" command
   to see the list of valid suffices. If the suffix begins with a "."
   then all files matching *.(regex_suffix) are included in the
   globbing. If the suffix begins with a character other than "." then
   all files matching exactly the (regex_suffix) are included in the
   globbing. 
   (5) subdirectory name to be created under DOUT_S_ROOT/rootdir
   (6) Option to specify whether or not to keep the most recent
   copy of the file with matching suffix in the RUNDIR in
   addition to copying it to the DOUT_S_ROOT/rootdir/subdir
   location.

XML VARIABLES USED BY THE SHORT TERM ARCHIVER 

    The following xml variables in CASEROOT/env_run.xml control the
    behavior of the short term archiver.  They can be queried using
    the xmlquery tool and modified using the xmlchange tool.

    DOUT_S - [boolean] (default TRUE) Checked in CASE.run script. If
    TRUE then st_archive script called at the end of a job.

    DOUT_S_ROOT - [string] Valid directory path to stage short term
    archive files.

    DOUT_S_SAVE_INTERIM_RESTART_FILES - [boolean] (default FALSE). If
    TRUE, then perform short term archiving on all interim restart
    files, not just those at the end of the run. The restart files
    are saved under the specific component directory of
    DOUT_S_ROOT/[comp_archive_spec/rootdir]/rest in addition to the
    top-level DOUT_S_ROOT/rest/[datename] directory.  Interim restart
    files are created using the REST_N and REST_OPTION variables.
    The associated rpointer files are not saved with the interim
    restart files and need to be manually generated in order for these
    restart files to be used to restart a run. This is for expert
    users ONLY and requires expert knowledge. We will not document
    this further in this guide.
"""

import sys, os, time
_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup          import *
from CIME.case_submit               import submit
from CIME.XML.standard_module_setup import *
from CIME.case                      import Case
from CIME.utils                     import get_model, run_cmd, appendStatus
from CIME.st_archive                import short_term_archive

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################

    get_model()

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    parser.add_argument("--input", "-in", action="store_true",
                        help="List out the contents of the env_archive.xml datafile in a"
                        "friendly format and check the env_archive.xml file for validity.")

    parser.add_argument("--output", "-out", action="store_true",
                        help="List out the contents of the archive directory.")

    parser.add_argument("--undo", "-undo", action="store_true",
                        help="move all the files from the DOUT_S_ROOT back into the RUNDIR")

    args = parser.parse_args()

    CIME.utils.handle_standard_logging_options(args)


    if args.caseroot is not None:
        os.chdir(args.caseroot)

    return args.input, args.output, args.undo

###############################################################################
def _main_func(description):
###############################################################################

    input_flag, output_flag, undo_flag = parse_command_line(sys.argv, description)

    # do short-term archiving
    short_term_archive(input_flag, output_flag, undo_flag)

    # resubmit case if appropriate
    case = Case()
    caseroot = case.get_value("CASEROOT")
    resubmit = int(case.get_value("RESUBMIT"))
    if resubmit > 0:
        appendStatus("resubmitting from st_archive",
                     caseroot=caseroot, sfile="CaseStatus")
        submit(caseroot, resubmit="case.st_archive")


###############################################################################

if __name__ == "__main__":
    _main_func(__doc__)
