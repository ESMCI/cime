#! /usr/bin/env perl 
#------------------------------------------------------------------------------
# Batch system directives
#------------------------------------------------------------------------------
{{ batchdirectives }}
use strict;
use warnings;
use POSIX qw(strftime);
use File::Path;
use File::Copy;
use File::Spec;
use File::Basename;
use XML::LibXML;
use Data::Dumper;
use Cwd;
use Getopt::Long;
my $scriptname = $0;

if(! -e "./xmlquery" and defined $ENV{'PBS_O_WORKDIR'})
{
	chdir $ENV{'PBS_O_WORKDIR'};
}

my $caseroot = `./xmlquery -value CASEROOT`;
my $cimeroot = `./xmlquery -value CIMEROOT`;
my %opts=(loglevel=>"INFO");
chdir $caseroot;
my $toolsdir = "$caseroot/Tools";
push(@INC, $toolsdir);
my $perl5lib = "$cimeroot/utils/perl5lib";
push(@INC, $perl5lib, "$perl5lib/Config");

require SetupTools;
require Run::RunChecks;
require Depends::Checks;
require Module::ModuleLoader;
require Batch::BatchUtils;
require Log::Log4perl;
my $logger;


#------------------------------------------------------------------------------
# PE Layout Documentation:
#------------------------------------------------------------------------------
{{ pedocumentation }}
# -------------------------------------------------------------------------
# global data needed by the script, stuff like the max number of threads, 
# -------------------------------------------------------------------------
my $banner = "*" x 65;
my %config;
my $case;
my $compiler;
my $machine; 
my $machroot;
my $mpilib;
my $scriptsroot;
my $maxthreads = 2;
my $LID;
# -------------------------------------------------------------------------
# Set up the run, run the model, do the postrun steps
# -------------------------------------------------------------------------
sub main
{
    getOptions();
    for(my $cycle=0;$cycle<$config{DATA_ASSIMILATION_CYCLES};$cycle++){
	doPreRunChecks();
	checkInputData();
	runModel();
	postRun();
	DoDataAssimilation($config{RUNDIR},$config{CASEROOT},$config{DATA_ASSIMILATION},
	    $config{DATA_ASSIMILATION_SCRIPT},$LID,$config{LOGDIR});
    }

    resubmitCheck();
    exit(0);
}
main(@ARGV) unless caller();

# -------------------------------------------------------------------------
# Get options
# -------------------------------------------------------------------------
sub getOptions()
{
    GetOptions(
	"loglevel" => \$opts{'loglevel'},
	);


    my $level = Log::Log4perl::Level::to_priority($opts{loglevel});
    Log::Log4perl->easy_init({level=>$level,
			  layout=>'%m%n'});
    
    $logger = Log::Log4perl::get_logger();


    # First, get the configuration from xml . 
    %config = SetupTools::getAllResolved();
    $case        = $config{'CASE'};
    $caseroot    = $config{'CASEROOT'};
    $compiler    = $config{'COMPILER'};
    $machine     = $config{'MACH'};
    $machroot    = $config{'MACHDIR'};
    $mpilib      = $config{'MPILIB'};
    if($config{'RUN_WITH_SUBMIT'} eq 'FALSE' )
    {
            my $out = "You are not calling the run script via the submit script. ";
	    $out.= "As a result, short-term archiving will not be called automatically.";
	    $out.= "Please submit your run by running the submit script like so: ";
	    $out.= "./case.submit";
	    $logger->logdie($out);
    }
    else
    {
        `./xmlchange -noecho -loglevel $opts{loglevel} RUN_WITH_SUBMIT=TRUE`;
	$config{RUN_WITH_SUBMIT}='TRUE';
    }
    
}

# -------------------------------------------------------------------------
# Pre run initialization code..
# -------------------------------------------------------------------------
sub doPreRunChecks()
{
    # Change to the case root
    chdir($config{'CASEROOT'});
	
    # Update the configuration from xml . 
    %config = SetupTools::getAllResolved();
    $case        = $config{'CASE'};
    $caseroot    = $config{'CASEROOT'};
    $compiler    = $config{'COMPILER'};
    $machine     = $config{'MACH'};
    $machroot    = $config{'MACHDIR'};
    $mpilib      = $config{'MPILIB'};

    # Now, check for locked files. 
    Run::RunChecks->checkLockedFiles();
    
    # Now, load the module environment... 
    # ModuleLoader for module-based systems.  
    
    my $moduleloader = new Module::ModuleLoader(machine  => $config{'MACH'}, 
						compiler => $config{'COMPILER'},
						mpilib   => $config{'MPILIB'}, 
						debug    => $config{'DEBUG'}, 
						caseroot => $config{'CASEROOT'},
						cimeroot => $config{'CIMEROOT'},
	                                        model    => $config{'MODEL'});
    
    $moduleloader->moduleInit();
    $moduleloader->findModulesForCase();
    $moduleloader->loadModules();
    
    my $mpilib = `./xmlquery -value MPILIB`;
    if($mpilib =~ /mpi-serial/)
    {
        delete $ENV{'MP_MPILIB'};
    }
    else
    {
        $ENV{'MP_MPILIB'} = $mpilib;
    }
    $config{'MPILIB'} = $mpilib;
	
    $logger->debug( "build complete? $config{'BUILD_COMPLETE'}");
    if($config{'BUILD_COMPLETE'} ne 'TRUE')
    {
	$logger->logdie("BUILD_COMPLETE is not true\nPlease rebuild the model interactively");
    }
	
    $ENV{'LBQUERY'} = "TRUE";
    if( ! defined $config{'BATCHSUBMIT'} || length $config{'BATCHSUBMIT'} == 0)
    {
	$ENV{'LBQUERY'} = "FALSE";
	$ENV{'BATCHQUERY'} = "undefined";
    }
    
    elsif ( $config{'BATCHSUBMIT'} eq 'UNSET')
    {
	$ENV{'LBSUBMIT'} = "FALSE";
	$ENV{'BATCHSUBMIT'} = "undefined";
    }
    
    ## Create the timing directories, optionally cleaning them if needed. 
    if(! -d $config{'RUNDIR'})
    {
	mkpath($config{'RUNDIR'}) or die "could not crate $config{'RUNDIR'}, exiting\n";
    }
    if(-d "$config{'RUNDIR'}/timing")
    {
	rmtree("$config{'RUNDIR'}/timing");
    }
    # Now make the timing and timing/checkpoints directories..
    mkpath("$config{'RUNDIR'}/timing/checkpoints");
    
    # Now set up the LID and sdate? strings
    $LID = strftime("%y%m%d-%H%M%S", localtime);
    my $sdate = strftime("%Y-%m-%d %H:%M:%S", localtime);
    $ENV{'LID'} = $LID;
    $ENV{'sdate'} = $sdate;
	
    open my $CS, ">>", "./CaseStatus" or die "Could not open CaseStatus file for writing!";
    print $CS "run started $sdate\n";
    close $CS;
	
    $logger->info( "-------------------------------------------------------------------------");
    $logger->info(" BUILDNML SCRIPT STARTING");
    $logger->info(" - To prestage restarts, untar a restart.tar file into $config{'RUNDIR'}");
	
    # Run preview namelists.. should turn this into a module at some point..
    system("./preview_namelists -loglevel $opts{loglevel} ");
	
    if($?)
    {
	$logger->logdie("ERROR from preview namelist - EXITING");
    }
	
    $logger->info( " BUILDNML SCRIPT HAS FINISHED SUCCESSFULLY");
    $logger->info( "-------------------------------------------------------------------------");
    $logger->info( " PRESTAGE SCRIPT STARTING");
    $logger->info(" - Case input data directory, DIN_LOC_ROOT, is $config{'DIN_LOC_ROOT'}");
    $logger->info( " - Checking the existence of input datasets in DIN_LOC_ROOT");

}

# -------------------------------------------------------------------------
# we've done the preview namelists check, now we'll check on the inputdata..
# -------------------------------------------------------------------------
sub checkInputData()
{
    chdir($config{'CASEROOT'}) or $logger->logdie ("cannot change directory to $config{'CASEROOT'}, $!");
    if(! -d $config{'DIN_LOC_ROOT'})
    {
	$logger->logdie( "ERROR, the input data directory $config{'DIN_LOC_ROOT'} cannot be found!");
    }
    
    open(F,"./check_input_data -inputdata $config{'DIN_LOC_ROOT'} -check -loglevel $opts{loglevel} |" );
    my @inputdatacheck = <F>;
    close(F);
    my @unknown = grep { /unknown/ } @inputdatacheck;
    my @missing = grep { /missing/ } @inputdatacheck;
    
    if(@unknown)
    {
	#my $unknownmsg = <<MSG;
        my $out= "Any files with \"status unknown\" below were not found in the\n";
        $out.="expected location, and are not from the input data repository.\n";
        $out.="This is informational only.\n";
	$logger->warn($out);
	system("./check_input_data -inputdata $config{'DIN_LOC_ROOT'} -check -loglevel $opts{loglevel} ");
    }
    
    if(@missing)
    {
	$logger->info( "Attempting to download missing data:");
	system("./check_input_data -inputdata $config{'DIN_LOC_ROOT'} -export -loglevel $opts{loglevel}");
    }
    
    open(F,"./check_input_data -inputdata $config{'DIN_LOC_ROOT'} -check -loglevel $opts{loglevel} |" );
    my @potmissing  = <F>;
    close(F);
    @missing = grep { /missing/ } @potmissing;
    if(@missing)
    {
	my $out = "The following files were not found, they are required\n";
	$out .= map { print $_ } @potmissing;
	$out .= "Invoke the following command to obtain them:\n";
	$out .= " ./check_input_data -inputdata $config{'DIN_LOC_ROOT'} -export ";
        $logger->logdie($out);
    }
    
    # Prestage our reference case if required..
    if( ($config{'GET_REFCASE'} eq 'TRUE') && ($config{'RUN_TYPE'} ne 'startup') && ($config{'CONTINUE_RUN'} eq 'FALSE'))
    {
	my $refdir = "$config{'RUN_REFCASE'}/$config{'RUN_REFDATE'}";
	my $fullrefdirpath = "$config{'DIN_LOC_ROOT'}/ccsm4_init/$refdir";
	if(! -d $fullrefdirpath)
	{
            my $out = "$banner\n";
            $out .= "ccsm_prestage ERROR: $refdir is not on local disk!\n";
            $out .= "Obtain this data from the svn input data repository\n";
            $out .= "> mkdir -p $refdir\n";
            $out .= "> cd $refdir\n";
            $out .= "> cd ..\n";
            $out .= "> svn export --force https://svn-ccsm-inputdata.cgd.ucar.edu/trunk/inputdata/$refdir\n";
            $out .= "or set GET_REFCASE to FALSE in env_run.xml\n";
            $out .= "and prestage the restart data to $config{'RUNDIR'} manually\n";
            $out .= "$banner\n";
	    $logger->logdie($out);
	}
	
	$logger->info(" - Prestaging REFCASE ($refdir) to $config{'RUNDIR'}");
	
	# prestage the reference case's files.  
	mkpath $config{'RUNDIR'} if (! -d $config{'RUNDIR'});
	my @refcasefiles = glob("$fullrefdirpath/*$config{'RUN_REFCASE'}*");
	foreach my $rcfile(@refcasefiles)
	{
	    my $rcbasename = basename($rcfile);
	    if(! -f "$config{'RUNDIR'}/$rcbasename")
	    {
		symlink($rcfile, "$config{'RUNDIR'}/$rcbasename") or $logger->warn ("could not symlink $rcfile to $config{'RUNDIR'}/$rcbasename, $!");
	    }
	}

	# find the *rpointer* files, copy them to the rundir. 
	my @rpointerfiles = glob("$fullrefdirpath/*rpointer*");
	foreach my $rpointerfile(@rpointerfiles)
	{
	    copy($rpointerfile, $config{'RUNDIR'});
	}
	
	chdir($config{'RUNDIR'});
	
	my @cam2_list = glob("*.cam2.*");
	foreach my $cam2file(@cam2_list)
	{
	    my $camfile = $cam2file;
	    $camfile =~ s/cam2/cam/g;
	    symlink($cam2file, $camfile);
	}
	
	my @allrundirfiles = glob("$config{'RUNDIR'}/*");
	foreach my $runfile(@allrundirfiles)
	{
	    chmod 0755, $runfile;
	}
	$logger->info( "prestaging has finished successfully!");
    }
}

# -------------------------------------------------------------------------
# Run the model system
# -------------------------------------------------------------------------
sub runModel()
{
    chdir $config{'RUNDIR'};
    
    system("sleep 10");
    my $localtime = localtime;
    # Set OMP_NUM_THREADS
    $ENV{'OMP_NUM_THREADS'} = {{ thread_count }};

    $logger->info("$localtime MODEL EXECUTION BEGINS HERE");
    # Run the model
    {{ mpirun }}
    $localtime = localtime;
    $logger->info( "$localtime MODEL EXECUTION HAS FINISHED");
}

sub disposeLog
{
    my($rundir,$caseroot,$component,$lid,$logdir) = @_;

    my $logfile = "$component.log.$lid";

    my $dir = getcwd;
    chdir $rundir unless($dir eq $rundir);

    if(-e $logfile){
	qx(gzip $logfile);
	$logfile .= ".gz";
	if(-e $logfile){
            copy($logfile, $logdir );
	}
    }

}	    





# -------------------------------------------------------------------------
# Post-processing
# -------------------------------------------------------------------------
sub postRun()
{
    # Go back to the caseroot, pull in the configuration in case a user changed 
    # of the variables  
    chdir $config{'CASEROOT'};
    %config = SetupTools::getAllResolved();
    my $rundir = $config{RUNDIR};
    my $sdate = strftime("%Y-%m-%d %H:%M:%S", localtime);

    my $workingdir = getcwd;

    # find the last $model.log and cpl.log
    my $logfile = "$rundir/cesm.log.$LID";
    my $cpllogfile = "$rundir/cpl.log.$LID";

    if( -z $logfile) 
    {
        $logger->error( "Model did not complete, no cesm.log file present");
    }

    if(! -e $cpllogfile)
    {
        my $msg = "Model did not complete - no cpl.log file corresponding to most recent model log: $logfile";
        
        appendCaseStatus($msg);
        $logger->logdie($msg);
    }

    if(-z $cpllogfile)
    {
        open (my $CS, ">>", "$config{'CASEROOT'}/CaseStatus") or warn "cannot open $config{'CASEROOT'}/CaseStatus, error was $!";
        print $CS "Run FAILED $sdate\n";
        $logger->logdie( "Model did not complete, see $logfile");

    }
    elsif( -e  $cpllogfile)
    {
        open my $CPLLOG, "<", "$cpllogfile" or warn "could not open $cpllogfile, $!";
        my @cpllines = <$CPLLOG>;
        close $CPLLOG;
        if(@cpllines)
        {
            my @success = grep(/SUCCESSFUL TERMINATION/, @cpllines);
            if(@success)
            {
                appendCaseStatus("run SUCCESSFUL $sdate");
            }
            else
            {
                appendCaseStatus("Model did not complete - see $logfile");
                exit(-1);
            }

        }
        else
        {
            appendCaseStatus("Model did not complete - no cpl.log file corresponding to most recent model log: $logfile");
            exit(-1);
        }
    }

    chdir($rundir) or $logger->logdie ("could not cd to $rundir");

    if(defined $config{'LOGDIR'} && (length($config{'LOGDIR'}) > 0))
    {
        if(! -e $config{'LOGDIR'})
        {
            mkpath($config{'LOGDIR'}) or $logger->warn ("Cannot make log directory $config{'LOGDIR'}, $!");
        }

        $logger->debug("lid: $LID");
	foreach my $comp (qw(atm cpl ocn wav glc ice rof lnd cesm)){
	    disposeLog($config{RUNDIR},$config{CASEROOT}, $comp ,$LID,$config{LOGDIR});
	}
    }

    # Run the getTiming script if desired
    my $owd = getcwd();
    chdir $config{'CASEROOT'};
    if($config{'CHECK_TIMING'} eq 'TRUE')
    {
        my $timingDir = $config{'CASEROOT'} . "/timing";
        mkpath $timingDir if(! -e $timingDir);
        $logger->info( "running timing script..");
        system(" $config{'CASETOOLS'}/getTiming -lid $LID ");
        $logger->info( "gzipping timing stats..");
        qx( gzip timing/cesm_timing_stats.$LID );
    }
    chdir $owd;

    # Save the timing files if desired
    if($config{'SAVE_TIMING'} eq 'TRUE')
    {
        move( "$config{'RUNDIR'}/timing",  "$config{'RUNDIR'}/timing.$LID");
    }
}

sub appendCaseStatus
{
    my $msg = shift;
    open (my $CS, ">>", "$config{'CASEROOT'}/CaseStatus") or warn "cannot open $config{'CASEROOT'}/CaseStatus, $!";
    print $CS "$msg\n";
    close $CS;
}

# check to see if we need to do resubmission from this particular job,
sub resubmitCheck()
{
#
# Mira requires special logic
#
    if(($config{DOUT_S} eq 'FALSE' && $config{RESUBMIT} > 0) || ($config{MACH} eq "mira" && $config{DOUT_S} eq "TRUE")) {
	my $submitscript = "$config{'CASEROOT'}/case.submit";
	my $cwd = getcwd;
	chdir $config{'CASEROOT'};
	my $resubmitcommand = "$submitscript -resubmit -scriptname case.";

	if(defined $config{TESTCASE} && $config{TESTCASE} eq "ERR"){
	    $resubmitcommand .= "test"; 
	}else{
	    $resubmitcommand .= "run"; 
	}
	$logger->debug( "running resubmit check $resubmitcommand");    
	system($resubmitcommand);
        if($?){ $logger->warn ("could not run CESM submit script, $! $?");}
	chdir $cwd;
    }
}

sub DoDataAssimilation
{
    my ($rundir, $caseroot, $da, $da_script, $lid, $logdir) = @_;

    return unless($da eq "TRUE");

    system(" $da_script 1> da.log.$lid 2>&1");
    sleep(1);
    $logger->logdie ("$da_script failed") unless ($? == 0);
    chdir $rundir;
    disposeLog($rundir,$caseroot, 'da' ,$lid,$logdir);
    chdir $caseroot;
}


