#! /usr/bin/env perl
#------------------------------------------------------------------------------
# Batch system directives
#------------------------------------------------------------------------------
{{ batchdirectives }}

use POSIX qw(strftime);
use File::Path;
use File::Copy;
use File::Spec;
use File::Basename;
use XML::LibXML;

if(! -e "./xmlquery" and defined $ENV{'PBS_O_WORKDIR'})
{
	chdir $ENV{'PBS_O_WORKDIR'};
}

my $scriptname = $0;
my %config;
my $caseroot = `./xmlquery -value CASEROOT`;
my $cimeroot = `./xmlquery -value CIMEROOT`;
chdir $caseroot;
my $perl5lib = "$cimeroot/utils/perl5lib";
push(@INC, $perl5lib);
require Config::SetupTools;
require Batch::BatchUtils;
use Cwd;
require Log::Log4perl;

my $level = Log::Log4perl::Level::to_priority("DEBUG");
Log::Log4perl->easy_init({level=>$level,
                          layout=>'%m%n'});

my $logger = Log::Log4perl::get_logger();

#------------------------------------------------------------------------------
# PE Layout Documentation:
#------------------------------------------------------------------------------
{{ pedocumentation }}

# -------------------------------------------------------------------------
# global data needed by the script, stuff like the max number of threads,
# -------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------
# checkRun - check if run is complete
#-----------------------------------------------------------------------------------------------
sub checkRun
{
    my $statusFile = shift;
    my $runComplete = 0;

    $logger->debug("In checkRun..."); 
#
# check if the run completed successfully
#
    if( -f $statusFile ) 
    {
	open my $CASESTATUS, "<", "$statusFile"  or die qq(lt_archive: unable to open $statusFile. Exiting...\n);
	while( <$CASESTATUS> ) 
	{
	    chomp $_;
	        if( /^run SUCCESSFUL/ )
		{
		    $runComplete = 1;
		}
	}
	close( $CASESTATUS );
    }
}

#-----------------------------------------------------------------------------------------------
# checkSta - check if short term archive is complete
#-----------------------------------------------------------------------------------------------
sub checkSta
{
    my $statusFile = shift;
    my $staComplete = 0;

    $logger->debug("In checkSta..."); 
#
# check if the short term archive completed successfully
#
    if( -f $statusFile ) 
    {
	open my $STASTATUS, "<", "$statusFile"  or die qq(lt_archive: unable to open $statusFile. Exiting...\n);
	while( <$STASTATUS> ) 
	{
	    chomp $_;
	        if( /^st_archive process complete/ )
		{
		    $staComplete = 1;
		}
	}
	close( $STASTATUS );
    }
}


#-----------------------------------------------------------------------------------------------
# main
#-----------------------------------------------------------------------------------------------
sub main
{
    $ENV{'maxthrds'} = 1;

    # First, get the configuration from every xml file.
    %config = SetupTools::getAllResolved();
    
    
    # Change to the case root
    chdir($config{'CASEROOT'});
    my $testlog = "$config{CASEROOT}/TestStatus.log";
    if(-e $testlog)
    {
        open(TL, ">>$testlog");
        print TL "lt_archive starting\n";
        close(TL);
    }
    $logger->info("lt_archive starting");
    
    # set up envrionment vars and call the lt_archive.sh script                               
    my $runComplete = checkRun( "$config{'CASEROOT'}/CaseStatus" );
    my $staComplete = checkSta( "$config{'CASEROOT'}/stArchiveStatus" );

    if( $runComplete && $staComplete )
    {
	$ENV{DOUT_S_ROOT} = $config{'DOUT_S_ROOT'};
	$ENV{DOUT_L_MSROOT} = $config{'DOUT_L_MSROOT'};
	$ENV{DOUT_L_HPSS_ACCNT} = $config{'DOUT_L_HPSS_ACCNT'};

	my $LID = strftime("%y%m%d-%H%M%S", localtime);

	qx($config{'CASEROOT'}/Tools/lt_archive.sh {{ lt_archive_args }} >> ltArchiveStatus.$LID 2>&1);
    }
    else
    {
	$logger->info("lt_archive: run or st_archive is not yet complete or was not successful. Unable to perform long term archive...");
	exit 1;
    }

    if(-e $testlog)
    {
        open(TL, ">>$testlog");
        print TL "lt_archive complete\n"; 
        close(TL);
    }
    $logger->info("lt_archive complete\n");
    resubmitCheck();
}

#-----------------------------------------------------------------------------------------------
# resubmitCheck - check if the case needs to be resubmitted
#-----------------------------------------------------------------------------------------------

sub resubmitCheck()
{
    if($config{RESUBMIT} > 0)
    {
        my $submitscript = "$config{CASEROOT}/$config{CASE}.submit";
        my $cwd = getcwd;
        chdir $config{CASEROOT};
        my $resubmitcommand = "$submitscript -resubmit -scriptname $config{'CASE'}.lt_archive";
        $logger->debug(" running resubmit check $resubmitcommand");
        if(-e $testlog)
        {
            open(TL, ">>$testlog");
            print TL "lt_archive complete\n"; 
            close(TL);
        }
        qx($resubmitcommand);
        if($?) { $logger->warn("could not run CESM submit script, $! $?") ; }            
        chdir $cwd;
    }
}
main(@ARGV) unless caller;
