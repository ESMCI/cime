#!/usr/bin/env python

"""Namelist creator for CIME's data atmosphere model.

While `build-namelist` historically has been a script in its own right, this
module can be imported, and provides the same functionality via the
`build_namelist` function.
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os
import shutil
import sys

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.build_namelist import setup_build_namelist, create_namelist_groups

logger = logging.getLogger(__name__)

COMPONENT = 'datm'

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def build_namelist(case, confdir, inst_string, infiles, definition_files,
                   defaults_files):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`. The
    `inst_string` argument is used as a suffix to distinguish files for
    different instances. The `confdir` argument is used to specify the directory
    in which output files will be placed.
    """

    #----------------------------------------------------
    # Get a bunch of information from the case.
    #----------------------------------------------------
    din_loc_root = case.get_value("DIN_LOC_ROOT")
    atm_domain_file = case.get_value("ATM_DOMAIN_FILE")
    atm_domain_path = case.get_value("ATM_DOMAIN_PATH")
    datm_mode = case.get_value("DATM_MODE")
    datm_presaero = case.get_value("DATM_PRESAERO")
    datm_topo = case.get_value("DATM_TOPO")
    datm_co2_tseries = case.get_value("DATM_CO2_TSERIES")
    atm_grid = case.get_value("ATM_GRID")
    grid = case.get_value("GRID")
    clm_usrdat_name = case.get_value("CLM_USRDAT_NAME")

    #----------------------------------------------------
    # Check for incompatible options.
    #----------------------------------------------------
    if "CLM" in datm_mode:
        expect(datm_presaero != "none",
               "A DATM_MODE for CLM is incompatible with DATM_PRESAERO=none.")
        expect(datm_topo != "none",
               "A DATM_MODE for CLM is incompatible with DATM_TOPO=none.")
    expect(grid != "CLM_USRDAT" or clm_usrdat_name in ("", "UNSET"),
           "GRID=CLM_USRDAT and CLM_USRDAT_NAME is NOT set.")

    #----------------------------------------------------
    # Log some settings.
    #----------------------------------------------------
    logger.info("DATM mode is %s", datm_mode)
    logger.info("DATM grid is %s", atm_grid)
    logger.info("DATM presaero mode is %s", datm_presaero)
    logger.info("DATM topo mode is %s", datm_topo)

    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf",
                                  "datm.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    #----------------------------------------------------
    # Create configuration information.
    #----------------------------------------------------
    config = {}
    config['grid'] = grid
    config['atm_grid'] = atm_grid
    config['datm_mode'] = datm_mode
    config['datm_presaero'] = datm_presaero
    config['datm_co2_tseries'] = datm_co2_tseries
    if datm_presaero == 'none':
        config['presaero_flag'] = "none"
    else:
        config['presaero_flag'] = "active"

    #----------------------------------------------------
    # Construct the namelist generator.
    #----------------------------------------------------
    nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files,  config)

    #----------------------------------------------------
    # Construct the list of streams.
    #----------------------------------------------------
    streams = nmlgen.get_streams()

    if datm_presaero == "pt1_pt1":
        streams.append("presaero.%s.%s" % (datm_presaero, atm_grid))
    elif datm_presaero != "none":
        streams.append("presaero.%s" % datm_presaero)

    if datm_topo != "none":
        streams.append("topo.%s" % datm_topo)

    if datm_co2_tseries != "none":
        streams.append("co2tseries.%s" % datm_co2_tseries)

    # Add bias correction stream if given in namelist.
    bias_correct = nmlgen.get_value("bias_correct")
    streams.append(bias_correct)

    # Add all anomaly forcing streams given in namelist.
    anomaly_forcing = nmlgen.get_value("anomaly_forcing")
    streams += anomaly_forcing

    #----------------------------------------------------
    # For each stream, create stream text file and update input data list.
    #----------------------------------------------------
    for stream in streams:

        # Ignore null values.
        if stream is None or stream in ("NULL", ""):
            continue

        if "presaero" in stream:
            if datm_presaero == "none":
                # Ignore aerosol streams when they are disabled.
                continue
            config = {'ispresaerostream': 'TRUE'}
        else:
            config = {'ispresaerostream': 'FALSE'}

        inst_stream = stream + inst_string
        logger.info("DATM stream is %s", inst_stream)
        stream_path = os.path.join(confdir,
                                   "datm.streams.txt." + inst_stream)
        user_stream_path = os.path.join(case.get_case_root(),
                                        "user_datm.streams.txt." + inst_stream)

        # Use the user's stream file, or create one if necessary.
        if os.path.exists(user_stream_path):
            shutil.copyfile(user_stream_path, stream_path)
        else:
            nmlgen.create_stream_file(config, stream, stream_path, data_list_path)

    #----------------------------------------------------
    # Create namelist
    #----------------------------------------------------
    # set default values in namelist groups
    create_namelist_groups(nmlgen, case, COMPONENT, atm_domain_file, atm_domain_path)

    nmlgen.add_default("vectors")

    presaero = ".false." if datm_presaero == "none" else ".true."
    nmlgen.add_default("presaero", value=presaero)

    nmlgen.add_default("iradsw")
    if datm_mode.startswith("CORE"):
        factorfn = "atm/datm7/CORE2/COREv2.correction_factors.T62.121007.nc"
        nmlgen.add_default("factorfn", os.path.join(din_loc_root, factorfn))

    #----------------------------------------------------
    # Finally, write out all the namelists.
    #----------------------------------------------------
    namelist_file = os.path.join(confdir, COMPONENT+"_in")
    modelio_file = os.path.join(confdir, "atm_modelio.nml")
    nmlgen.write_output_files(namelist_file, modelio_file, data_list_path)

###############################################################################
def _main_func():
###############################################################################

    caseroot, confdir, inst_string, infiles, definition_files, defaults_files \
    = setup_build_namelist(sys.argv, component=COMPONENT, cimeroot=CIMEROOT)
    
    # Now build the component namelist and required stream txt files
    with Case(caseroot) as case:
        build_namelist(case, confdir, inst_string, infiles, definition_files, defaults_files)

###############################################################################

if __name__ == "__main__":
    _main_func()
