#!/usr/bin/env python

"""Namelist creator for CIME's data atmosphere model.

While `build-namelist` historically has been a script in its own right, this
module can be imported, and provides the same functionality via the
`build_namelist` function.
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os
import shutil
import sys

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect

logger = logging.getLogger(__name__)

COMPONENT = 'datm'

# Yes this is a long function, but for now just live with it.
# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
def build_namelist(case, confdir, inst_string, infiles, definition_files,
                   defaults_files):
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`. The
    `inst_string` argument is used as a suffix to distinguish files for
    different instances. The `confdir` argument is used to specify the directory
    in which output files will be placed.
    """

    # Get a bunch of information from the case.
    din_loc_root = case.get_value("DIN_LOC_ROOT")
    atm_domain_file = case.get_value("ATM_DOMAIN_FILE")
    atm_domain_path = case.get_value("ATM_DOMAIN_PATH")
    datm_mode = case.get_value("DATM_MODE")
    datm_presaero = case.get_value("DATM_PRESAERO")
    datm_topo = case.get_value("DATM_TOPO")
    datm_co2_tseries = case.get_value("DATM_CO2_TSERIES")
    atm_grid = case.get_value("ATM_GRID")
    grid = case.get_value("GRID")
    clm_usrdat_name = case.get_value("CLM_USRDAT_NAME")

    # Check for incompatible options.
    if "CLM" in datm_mode:
        expect(datm_presaero != "none",
               "A DATM_MODE for CLM is incompatible with DATM_PRESAERO=none.")
        expect(datm_topo != "none",
               "A DATM_MODE for CLM is incompatible with DATM_TOPO=none.")
    expect(grid != "CLM_USRDAT" or clm_usrdat_name in ("", "UNSET"),
           "GRID=CLM_USRDAT and CLM_USRDAT_NAME is NOT set.")

    # Log some settings.
    logger.info("DATM mode is %s", datm_mode)
    logger.info("DATM grid is %s", atm_grid)
    logger.info("DATM presaero mode is %s", datm_presaero)
    logger.info("DATM topo mode is %s", datm_topo)

    # Create configuration information.
    config = {}
    config['grid'] = grid
    config['atm_grid'] = atm_grid
    config['datm_mode'] = datm_mode
    config['datm_presaero'] = datm_presaero
    config['datm_co2_tseries'] = datm_co2_tseries
    if datm_presaero == 'none':
        config['presaero_flag'] = "none"
    else:
        config['presaero_flag'] = "active"

    # Construct the namelist generator.
    nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files,
                               config)

    # Construct the list of streams.
    streams = nmlgen.get_streams()
    if datm_presaero == "pt1_pt1":
        streams.append("presaero.%s.%s" % (datm_presaero, atm_grid))
    elif datm_presaero != "none":
        streams.append("presaero.%s" % datm_presaero)
    if datm_topo != "none":
        streams.append("topo.%s" % datm_topo)
    if datm_co2_tseries != "none":
        streams.append("co2tseries.%s" % datm_co2_tseries)
    # Add bias correction stream if given in namelist.
    bias_correct = nmlgen.get_value("bias_correct")
    streams.append(bias_correct)
    # Add all anomaly forcing streams given in namelist.
    anomaly_forcing = nmlgen.get_value("anomaly_forcing")
    streams += anomaly_forcing

    # Clear out old data.
    data_list_path = os.path.join(case.get_case_root(), "Buildconf",
                                  "datm.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)
    # For each stream, create stream text file and update input data list.
    for stream in streams:
        # Ignore null values.
        if stream is None or stream in ("NULL", ""):
            continue
        if "presaero" in stream:
            if datm_presaero == "none":
                # Ignore aerosol streams when they are disabled.
                continue
            config = {'ispresaerostream': 'TRUE'}
        else:
            config = {'ispresaerostream': 'FALSE'}
        inst_stream = stream + inst_string
        logger.info("DATM stream is %s", inst_stream)
        stream_path = os.path.join(confdir,
                                   "datm.streams.txt." + inst_stream)
        user_stream_path = os.path.join(case.get_case_root(),
                                        "user_datm.streams.txt." + inst_stream)
        # Use the user's stream file, or create one if necessary.
        if os.path.exists(user_stream_path):
            shutil.copyfile(user_stream_path, stream_path)
        else:
            nmlgen.create_stream_file(config, stream, stream_path,
                                      data_list_path)

    # Create `shr_strdata_nml` namelist group.
    atm_full_domain_path = os.path.join(atm_domain_path, atm_domain_file)
    nmlgen.create_shr_strdata_nml(domain_file_path=atm_full_domain_path)
    # This is specific to datm.
    nmlgen.add_default("vectors")

    # Create `datm_nml` namelist group.
    nmlgen.add_default("iradsw")
    if datm_mode.startswith("CORE"):
        factorfn = "atm/datm7/CORE2/COREv2.correction_factors.T62.121007.nc"
        nmlgen.add_default("factorfn", os.path.join(din_loc_root, factorfn))
    presaero = ".false." if datm_presaero == "none" else ".true."
    nmlgen.add_default("presaero", value=presaero)
    # Should the following be in the namelist definitions file instead of here?
    nmlgen.add_default("decomp", "1d")
    nmlgen.add_default("force_prognostic_true", ".false.")
    nmlgen.add_default("restfilm", "undefined")
    nmlgen.add_default("restfils", "undefined")

    # Create `modelio` namelist group.
    nmlgen.add_default("logfile", "atm.log")

    # Finally, write out all the namelists.
    namelist_file = os.path.join(confdir, COMPONENT+"_in")
    modelio_file = os.path.join(confdir, "atm_modelio.nml")
    nmlgen.write_output_files(namelist_file, modelio_file, data_list_path)

# pylint: enable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements

def _main_func(caseroot, confdir, inst_string, namelist_infiles, user_xml_dir):
    # Figure out where definition/defaults files are.
    namelist_xml_dir = os.path.join(CIMEROOT, "components", "data_comps",
                                    COMPONENT, "bld", "namelist_files")
    definition_file_basename = "namelist_definition_%s.xml" % COMPONENT
    definition_files = [os.path.join(namelist_xml_dir, definition_file_basename)]
    user_definition = os.path.join(user_xml_dir, definition_file_basename)
    # User definition *replaces* existing definition.
    if os.path.isfile(user_definition):
        definition_files = [user_definition]
    defaults_file_basename = "namelist_defaults_%s.xml" % COMPONENT
    defaults_files = [os.path.join(namelist_xml_dir, defaults_file_basename)]
    user_defaults = os.path.join(user_xml_dir, defaults_file_basename)
    # User defaults *extends* existing defaults.
    if os.path.isfile(user_defaults):
        defaults_files.append(user_defaults)
    for file_ in definition_files + defaults_files:
        expect(os.path.isfile(file_),
               "Namelist XML file %s not found!" % file_)
    # Split apart input file names.
    if namelist_infiles == '':
        infiles = []
    else:
        infiles = namelist_infiles.split(',')
    # Now build the namelist.
    with Case(caseroot) as case:
        build_namelist(case, confdir, inst_string, infiles,
                       definition_files, defaults_files)

if __name__ == "__main__":
    # Arguments expected from the buildnml script.
    CASEROOT = sys.argv[1]
    # This is passed in, but ignore it, since we require CIMEROOT to be set in
    # the environment.
    # CIMEROOT = sys.argv[2]
    CONFDIR = sys.argv[3]
    INST_STRING = sys.argv[4]
    NAMELIST_INFILES = sys.argv[5]
    USER_XML_DIR = sys.argv[6]
    _main_func(CASEROOT, CONFDIR, INST_STRING, NAMELIST_INFILES, USER_XML_DIR)
