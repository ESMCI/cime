#!/usr/bin/env perl

#-------------------------------------------------------------------------------------------
# build-namelist script for the CIME Data Atmosphere Model
#-------------------------------------------------------------------------------------------

use strict;
use English;
use IO::File;

my ($caseroot, $cimeroot, $confdir, $inst_string, $namelist_infile, $user_xml_dir) = @ARGV;

my @dirs = ( "$cimeroot/utils/perl5lib" );
unshift @INC, @dirs;
require Streams::BuildNamelistUtils;

#-------------------------------------------
# Create nmlgen object
#-------------------------------------------

my $nmlgen = BuildNamelistUtils->new('datm',$cimeroot, $caseroot, $confdir, 
				     $user_xml_dir, $namelist_infile);

#-------------------------------------------
# Required xml variables           
#-------------------------------------------

my $DIN_LOC_ROOT    = $nmlgen->get_xmlvar('DIN_LOC_ROOT');
my $ATM_DOMAIN_FILE = $nmlgen->get_xmlvar('ATM_DOMAIN_FILE');
my $ATM_DOMAIN_PATH = $nmlgen->get_xmlvar('ATM_DOMAIN_PATH');
my $DATM_MODE       = $nmlgen->get_xmlvar('DATM_MODE');
my $DATM_PRESAERO   = $nmlgen->get_xmlvar('DATM_PRESAERO');
my $DATM_TOPO       = $nmlgen->get_xmlvar('DATM_TOPO');
my $DATM_CO2_TSERIES= $nmlgen->get_xmlvar('DATM_CO2_TSERIES');
my $ATM_GRID        = $nmlgen->get_xmlvar('ATM_GRID');
my $GRID            = $nmlgen->get_xmlvar('GRID');
my $CLM_USRDAT_NAME = $nmlgen->get_xmlvar('CLM_USRDAT_NAME');

if ( $DATM_MODE =~ /CLM/ && $DATM_PRESAERO eq "none" ) {
   die "A DATM_MODE for CLM is incompatible with DATM_PRESAERO=none\n";
}
if ( $DATM_MODE =~ /CLM/ && $DATM_TOPO eq "none" ) {
   die "A DATM_MODE for CLM is incompatible with DATM_TOPO=none\n";
}
if ( $GRID eq "CLM_USRDAT" && $CLM_USRDAT_NAME =~ /^(UNSET|)$/ ) {
    die "** GRID=CLM_USRDAT and CLM_USRDAT_NAME is NOT set  **";
}

my $var = "DATM_MODE"; 
my $value = $nmlgen->get_xmlvar($var);
$nmlgen->set_variable_value($var, "\'$value\'" );

my $var= "DATM_PRESAERO";
my $value = $nmlgen->get_xmlvar($var);
$nmlgen->set_variable_value($var, "\'$value\'" );

print "DATM mode is $DATM_MODE \n"; 
print "DATM grid is $ATM_GRID \n";
print "DATM presaero mode is $DATM_PRESAERO \n"; 
print "DATM topo mode is $DATM_TOPO \n"; 

#-------------------------------------------
# Determine hash for parsing default_namelist_datm.xml
#-------------------------------------------

my %namelist_opts;
$namelist_opts{'grid'}             = $GRID;
$namelist_opts{'atm_grid'}         = $ATM_GRID;
$namelist_opts{'datm_mode'}        = $DATM_MODE;
$namelist_opts{'presaero_mode'}    = $DATM_PRESAERO;
$namelist_opts{'datm_co2_tseries'} = $DATM_CO2_TSERIES;
if ($DATM_PRESAERO ne 'none') {
    $namelist_opts{'presaero_flag'} = "active";
} else {
    $namelist_opts{'presaero_flag'} = "none";
}

#-------------------------------------------
# Determine streams
#-------------------------------------------

my @streams = $nmlgen->get_streams(\%namelist_opts );
if ($DATM_PRESAERO ne "none") {
    if ($DATM_PRESAERO eq "pt1_pt1") {
	push (@streams, "presaero.$DATM_PRESAERO.$ATM_GRID");
    } else {
	push (@streams, "presaero.$DATM_PRESAERO");
    }
 }
if ($DATM_TOPO ne "none") {
   push (@streams, "topo.$DATM_TOPO");
}
if ($DATM_CO2_TSERIES ne "none") {
    push (@streams, "co2tseries.$DATM_CO2_TSERIES");
}

# Check for bias correction streams
my $bias_correct = $nmlgen->get_value( 'bias_correct' );
if ( $bias_correct ) {
    push (@streams, $bias_correct); #from namelist_defaults_datm.xml
}

# Check for anomaly forcing streams
my $anomaly_forcing = $nmlgen->get_value( 'anomoly forcing' );
my @anomaly_forcing = split ",", $anomaly_forcing, -1;
if ( @anomaly_forcing ) {
    push (@streams, @anomaly_forcing);
}

#-------------------------------------------
# For each stream, create stream text file and update input data list
#-------------------------------------------

my $fh_out = new IO::File;
$fh_out->open(">$caseroot/Buildconf/datm.input_data_list") or
    die "** can't open filepath file: datm.input_data_list\n";

foreach my $stream ( @streams ) {
    if ($stream eq "NULL") {
	next;
    }
    if ($stream eq "presaero" && $DATM_PRESAERO eq "none" ) {
	# Skip there is no prescribed aerosol stream
	next;
    }
    print "DATM stream is $stream$inst_string \n";

    # Create hash needed to parse namelist_defaults.xml file
    $namelist_opts{'stream'} = $stream;
    if ( $stream =~ /presaero/ ) {
	$namelist_opts{'ispresaerostream'} = "TRUE";
    } else {
	$namelist_opts{'ispresaerostream'} = "FALSE";
    }

    # Determine stream txt file and update the streams_namelists hash for the new stream
    my $outstream = "datm.streams.txt" . ".$stream" . "$inst_string";
    $nmlgen->create_stream_file(\%namelist_opts, $stream, $outstream, $fh_out);
}

$fh_out->close;

#-------------------------------------------
# namelist group: shr_strdata_nml 
#-------------------------------------------

$nmlgen->create_shr_strdata_nml(\%namelist_opts, "${ATM_DOMAIN_PATH}/${ATM_DOMAIN_FILE}" );

#-------------------------------------------
# namelist group: datm_nml 
#-------------------------------------------

$nmlgen->add_default('iradsw');

if ($DATM_MODE =~ /^CORE/) {
    my $factorfn = "$DIN_LOC_ROOT/atm/datm7/CORE2/COREv2.correction_factors.T62.121007.nc";
    $nmlgen->add_default('factorfn', "$factorfn" );
}
if ($DATM_PRESAERO eq "none" ) {
    $nmlgen->add_default('presaero', '.false.');
} else {
    $nmlgen->add_default('presaero', '.true.');
}

$nmlgen->add_default('decomp', '1d');
$nmlgen->add_default('force_prognostic_true', '.false.');
$nmlgen->add_default('restfilm',  'undefined');
$nmlgen->add_default('restfils',  'undefined');

#-------------------------------------------
# Write output files
#-------------------------------------------

$nmlgen->write_output_files('atm');


