#!/usr/bin/env perl

#-----------------------------------------------------------------------------------------------
# build-namelist script for the CIME dice (Data Ice Model).
#--------------------------------------------------------------------------------------------

use strict;
use English;
use IO::File;
use File::Basename;
#-----------------------------------------------------------------------------------------------

my ($caseroot, $cimeroot, $confdir, $inst_string, $namelist_infile, $user_xml_dir) = @ARGV;

my @dirs = ( "$cimeroot/utils/perl5lib");
unshift @INC, @dirs;

require Build::NamelistDefinition;
require Build::NamelistDefaults;
require Build::Namelist;
require Streams::BuildNamelistUtils;

####################################
# Create required objects
####################################

my ($definition, $defaults, $nl) = 
    BuildNamelistUtils::create_namelist_objects('dice', $cimeroot, $caseroot, $confdir,
						$user_xml_dir, $namelist_infile);

####################################
# Required xml variables           #
####################################

my %xmlvars = ();
SetupTools::getxmlvars(${caseroot},\%xmlvars);
foreach my $attr (keys %xmlvars) {
    $xmlvars{$attr} = SetupTools::expand_xml_var($xmlvars{$attr}, \%xmlvars);
}

my $DIN_LOC_ROOT    = $xmlvars{'DIN_LOC_ROOT'};
my $DICE_MODE       = $xmlvars{'DICE_MODE'};
my $ICE_GRID        = $xmlvars{'ICE_GRID'};
my $ICE_DOMAIN_FILE = $xmlvars{'ICE_DOMAIN_FILE'};
my $ICE_DOMAIN_PATH = $xmlvars{'ICE_DOMAIN_PATH'};

print "  dice_mode is $DICE_MODE \n";
print "  dice grid is $ICE_GRID \n";

####################################
# Streams file(s)                  #
####################################

# Hash for parsing default_namelist_dice.xml
my %namelist_opts;
$namelist_opts{'dice_mode'} = $DICE_MODE;
$namelist_opts{'ice_grid'}  = $ICE_GRID;

# Create streams template file(s) - loop over streams
my $streams = $defaults->get_value( "streamslist", \%namelist_opts );
$streams = SetupTools::expand_xml_var( $streams, \%xmlvars );
my @streams = split ",", $streams, -1;

# Create input data list 
my $fh_out = new IO::File;
$fh_out->open(">$caseroot/Buildconf/dice.input_data_list") or
    die "** can't open filepath file: dice.input_data_list\n";

my %streams_namelists;
foreach my $stream ( @streams ) {
    if ($stream eq "NULL") {
	next;
    }
    print "  dice stream is $stream$inst_string \n";

    # Set stream specific part of namelist_opts hash
    $namelist_opts{'stream'} = $stream;

    # Determine stream txt file and update the streams_namelists hash for the new stream
    my $outstream = "dice.streams.txt" . ".$stream" . "$inst_string";

    # Create hash to initialze streams object
    my %stream_template_opts;
    if ($stream eq "prescribed" || $stream eq "copyall") {
	# Currently ASSUME ONLY 1 FILE for prescribed mode
	my $grid_file = $defaults->get_value( "strm_grid_file", \%namelist_opts );
	$grid_file = SetupTools::expand_xml_var($grid_file, \%xmlvars);
	my $data_file = $defaults->get_value( "strm_data_file", \%namelist_opts );
	$data_file = SetupTools::expand_xml_var($data_file, \%xmlvars);
	$stream_template_opts{'domainpath'} = dirname($grid_file);
	$stream_template_opts{'domain'}     = basename($grid_file);
	$stream_template_opts{'filepath'}   = dirname($data_file);
	$stream_template_opts{'filenames'}  = basename($data_file);
    }
    BuildNamelistUtils::create_stream_file($caseroot, $confdir, \%xmlvars, $defaults, 
					   \%namelist_opts, \%stream_template_opts, \%streams_namelists, 
					   $stream, $outstream, $fh_out);
}
$fh_out->close;

#########################################################
# namelist group: shr_strdata_nml (in file dice_ice_in) #
#########################################################

BuildNamelistUtils::create_shr_strdata_nml('dice', $nl, $defaults, $definition, 
					   \%namelist_opts, \%streams_namelists, 
					   $DIN_LOC_ROOT, "${ICE_DOMAIN_PATH}/${ICE_DOMAIN_FILE}" );

#########################################################
# namelist group: dice_nml (in file dice_in)            #
#########################################################


BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'ice_in', "dice_ice_in${inst_string}");

BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'decomp',    '1d');

BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'force_prognostic_true', '.false.');

BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'flux_qacc'); #FIXME - is this right?

##########################################################
# Write output files
##########################################################

BuildNamelistUtils::write_output_files('ice', $nl, $definition, $DIN_LOC_ROOT, $caseroot); 

