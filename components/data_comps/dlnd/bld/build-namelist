#!/usr/bin/env python

"""Namelist creator for CIME's data ocn model.

While `build-namelist` historically has been a script in its own right, this
module can be imported, and provides the same functionality via the
`build_namelist` function.
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os
import shutil
import sys

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.utils import handle_standard_logging_options
from CIME.utils import setup_standard_logging_options

logger = logging.getLogger(__name__)

###############################################################################
def _parse_input(argv):
###############################################################################

    if "--test" in argv:
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    parser = argparse.ArgumentParser()

    setup_standard_logging_options(parser)

    parser.add_argument("--cimeroot", required=True,
                        help="CIME root directory")

    parser.add_argument("--caseroot", required=True,
                        help="case directory")

    parser.add_argument("--confdir", required=True,
                        help="configuration directory for component namelist generation")

    parser.add_argument("--infile", nargs="+", required=True,
                        help="file containing user-modified namelists settings")

    parser.add_argument("--user_xml_dir", required=True,
                        help="user xml directory, user changes to "
                        "namelist_defaults.xml and namelist_definitions.xml")

    parser.add_argument("--inst_string", required=True,
                        help="instance string")

    args = parser.parse_args()

    handle_standard_logging_options(args)

    return args.cimeroot, args.caseroot, args.confdir, args.inst_string, args.infile, args.user_xml_dir 

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelists(case, confdir, inst_string, infiles, definition_files, defaults_files):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`. The
    `inst_string` argument is used as a suffix to distinguish files for
    different instances. The `confdir` argument is used to specify the directory
    in which output files will be placed.
    """

    #----------------------------------------------------
    # Get a bunch of information from the case.
    #----------------------------------------------------
    din_loc_root = case.get_value("DIN_LOC_ROOT")
    lnd_domain_file = case.get_value("LND_DOMAIN_FILE")
    lnd_domain_path = case.get_value("LND_DOMAIN_PATH")
    dlnd_mode = case.get_value("DLND_MODE")
    lnd_grid = case.get_value("LND_GRID")

    glc_nec = case.get_value("GLC_NEC")

    #----------------------------------------------------
    # Check for incompatible options.
    #----------------------------------------------------
    expect(lnd_grid != "null",
           "LND_GRID cannot be null")
    expect(dlnd_mode != "NULL",
           "DLND_MODE cannot be NULL")

    #----------------------------------------------------
    # Log some settings.
    #----------------------------------------------------
    logger.info("DLND mode is %s", dlnd_mode)
    logger.info("DLND grid is %s", lnd_grid)
    logger.info("DLND glc_nec is %s", glc_nec) 

    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf",
                                  "dlnd.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    #----------------------------------------------------
    # Create configuration information.
    #----------------------------------------------------
    config = {}
    config['lnd_grid'] = lnd_grid
    config['dlnd_mode'] = dlnd_mode

    #----------------------------------------------------
    # Construct the namelist generator.
    #----------------------------------------------------
    nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files, config)

    #----------------------------------------------------
    # Construct the list of streams.
    #----------------------------------------------------
    streams = nmlgen.get_streams()

    #----------------------------------------------------
    # For each stream, create stream text file and update input data list.
    #----------------------------------------------------
    for stream in streams:

        # Ignore null values.
        if stream is None or stream in ("NULL", ""):
            continue

        inst_stream = stream + inst_string
        logger.info("DLND stream is %s", inst_stream)
        stream_path = os.path.join(confdir, "dlnd.streams.txt." + inst_stream)
        user_stream_path = os.path.join(case.get_case_root(),
                                        "user_dlnd.streams.txt." + inst_stream)

        # Use the user's stream file, or create one if necessary.
        if os.path.exists(user_stream_path):
            shutil.copyfile(user_stream_path, stream_path)
        else:
            nmlgen.create_stream_file(config, stream, stream_path, data_list_path)

    #----------------------------------------------------
    # Create namelist groups
    #----------------------------------------------------
    # Create namelist `shr_strdata_nml` namelist group.
    nmlgen.create_shr_strdata_nml()
    nmlgen.add_default("decomp", "1d")
    nmlgen.add_default("force_prognostic_true", ".false.")
    nmlgen.add_default("restfilm", "undefined")
    nmlgen.add_default("restfils", "undefined")
    if lnd_domain_file != "UNSET":
        full_domain_path = os.path.join(lnd_domain_path, lnd_domain_file)
        nmlgen.add_default("domainfile", value=full_domain_path)

    #----------------------------------------------------
    # Finally, write out all the namelists.
    #----------------------------------------------------
    namelist_file = os.path.join(confdir, "dlnd_in")
    nmlgen.write_output_file(namelist_file, data_list_path)

###############################################################################
def _main_func():
###############################################################################

    cimeroot, caseroot, confdir, inst_string, infile, user_xml_dir = _parse_input(sys.argv)

    # Figure out where definition/defaults files are.
    namelist_xml_dir = os.path.join(cimeroot, "components", "data_comps",
                                    "dlnd", "bld", "namelist_files")

    # User definition *replaces* existing definition.
    definition_file_basename = "namelist_definition_dlnd.xml"
    definition_file = [os.path.join(namelist_xml_dir, definition_file_basename)]
    user_definition = os.path.join(user_xml_dir, definition_file_basename)
    if os.path.isfile(user_definition):
        definition_file = [user_definition]

    # User defaults *extends* existing defaults.
    defaults_file_basename = "namelist_defaults_dlnd.xml"
    defaults_files = [os.path.join(namelist_xml_dir, defaults_file_basename)]
    user_defaults = os.path.join(user_xml_dir, defaults_file_basename)
    if os.path.isfile(user_defaults):
        defaults_files.append(user_defaults)

    # Checkout if definition and defaults file exist
    for file_ in definition_file + defaults_files:
        expect(os.path.isfile(file_), "Namelist XML file %s not found!" % file_)

    # Now build the component namelist and required stream txt files
    with Case(caseroot) as case:
        _create_namelists(case, confdir, inst_string, infile, definition_file, defaults_files)

###############################################################################

if __name__ == "__main__":
    _main_func()
