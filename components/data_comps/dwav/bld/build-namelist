#!/usr/bin/env python

"""Namelist creator for CIME's data ocn model.

While `build-namelist` historically has been a script in its own right, this
module can be imported, and provides the same functionality via the
`build_namelist` function.
"""
# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os
import shutil
import sys

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(os.environ["CIMEROOT"],"scripts","Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.build_namelist import setup_build_namelist
from CIME.build_namelist import setup_build_namelist, create_namelist_groups

logger = logging.getLogger(__name__)

COMPONENT = 'dwav'

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def build_namelist(case, confdir, inst_string, infiles, definition_files,
                   defaults_files):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`. The
    `inst_string` argument is used as a suffix to distinguish files for
    different instances. The `confdir` argument is used to specify the directory
    in which output files will be placed.
    """

    #----------------------------------------------------
    # Get a bunch of information from the case.
    #----------------------------------------------------
    din_loc_root = case.get_value("DIN_LOC_ROOT")
    wav_domain_file = case.get_value("WAV_DOMAIN_FILE")
    wav_domain_path = case.get_value("WAV_DOMAIN_PATH")
    dwav_mode = case.get_value("DWAV_MODE")
    wav_grid = case.get_value("WAV_GRID")

    #----------------------------------------------------
    # Check for incompatible options.
    #----------------------------------------------------
    expect(wav_grid != "null",
           "WAV_GRID cannot be null")
    expect(dwav_mode != "NULL",
           "DWAV_MODE cannot be NULL")

    #----------------------------------------------------
    # Log some settings.
    #----------------------------------------------------
    logger.info("DWAV mode is %s", dwav_mode)
    logger.info("DWAV grid is %s", wav_grid)

    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf",
                                  "dwav.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    #----------------------------------------------------
    # Create configuration information.
    #----------------------------------------------------
    config = {}
    config['wav_grid'] = wav_grid
    config['dwav_mode'] = dwav_mode

    #----------------------------------------------------
    # Construct the namelist generator.
    #----------------------------------------------------
    nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files, config)

    #----------------------------------------------------
    # Construct the list of streams.
    #----------------------------------------------------
    streams = nmlgen.get_streams()

    #----------------------------------------------------
    # For each stream, create stream text file and update input data list.
    #----------------------------------------------------
    for stream in streams:

        # Ignore null values.
        if stream is None or stream in ("NULL", ""):
            continue

        inst_stream = stream + inst_string
        logger.info("DWAV stream is %s", inst_stream)
        stream_path = os.path.join(confdir,
                                   "dwav.streams.txt." + inst_stream)
        user_stream_path = os.path.join(case.get_case_root(),
                                        "user_dwav.streams.txt." + inst_stream)

        # Use the user's stream file, or create one if necessary.
        if os.path.exists(user_stream_path):
            shutil.copyfile(user_stream_path, stream_path)
        else:
            nmlgen.create_stream_file(config, stream, stream_path, data_list_path)

    #----------------------------------------------------
    # Create namelist groups
    #----------------------------------------------------
    # set default values in namelist groups
    create_namelist_groups(nmlgen, case, COMPONENT, wav_domain_file, wav_domain_path)

    #----------------------------------------------------
    # Finally, write out all the namelists.
    #----------------------------------------------------
    namelist_file = os.path.join(confdir, COMPONENT+"_in")
    nmlgen.write_output_file(namelist_file, data_list_path)

###############################################################################
def _main_func():
###############################################################################

    caseroot, confdir, inst_string, infiles, definition_files, defaults_files \
    = setup_build_namelist(sys.argv, component=COMPONENT, cimeroot=CIMEROOT)
    
    # Now build the component namelist and required stream txt files
    with Case(caseroot) as case:
        build_namelist(case, confdir, inst_string, infiles, definition_files, defaults_files)

###############################################################################

if __name__ == "__main__":
    _main_func()
