#!/usr/bin/env perl
 
#--------------------------------------------------------------------------------------------
# build-namelist script for the CIME dwav (Data Wav Model).
#--------------------------------------------------------------------------------------------

use strict;
use English;
use IO::File;
use File::Basename;
#-----------------------------------------------------------------------------------------------

my ($caseroot, $cimeroot, $confdir, $inst_string, $namelist_infile, $user_xml_dir) = @ARGV;

my @dirs = ( "$cimeroot/utils/perl5lib");
unshift @INC, @dirs;

require Build::NamelistDefinition;
require Build::NamelistDefaults;
require Build::Namelist;
require Streams::BuildNamelistUtils;

####################################
# Create required objects
####################################

my ($definition, $defaults, $nl) = 
    BuildNamelistUtils::create_namelist_objects('dwav', $cimeroot, $caseroot, $confdir,
						$user_xml_dir, $namelist_infile);
####################################
# Required xml variables           #
####################################

my %xmlvars = ();
SetupTools::getxmlvars(${caseroot},\%xmlvars);
foreach my $attr (keys %xmlvars) {
    $xmlvars{$attr} = SetupTools::expand_xml_var($xmlvars{$attr}, \%xmlvars);
}

my $DIN_LOC_ROOT    = $xmlvars{'DIN_LOC_ROOT'};
my $DWAV_MODE       = $xmlvars{'DWAV_MODE'};
my $WAV_GRID        = $xmlvars{'WAV_GRID'};

print "  dwav mode is $DWAV_MODE \n";
print "  dwav grid is $WAV_GRID \n";

####################################
# Streams file(s)                  #
####################################

# Hash for parsing default_namelist_docn.xml
my %namelist_opts;
$namelist_opts{'dwav_mode'} = $DWAV_MODE;
$namelist_opts{'wav_grid'}  = $WAV_GRID;

# Create streams template file(s) - loop over streams
my $streams = $defaults->get_value( "streamslist", \%namelist_opts );
$streams = SetupTools::expand_xml_var( $streams, \%xmlvars );
my @streams = split ",", $streams, -1;

# Create input data list 
my $fh_out = new IO::File;
$fh_out->open(">$caseroot/Buildconf/docn.input_data_list") or
    die "** can't open filepath file: docn.input_data_list\n";

my %streams_namelists;
foreach my $stream ( @streams ) {
    if ($stream eq "NULL") {
	next;
    }
    print "  dwav stream is $stream$inst_string \n";

    # Set stream specific part of namelist_opts hash
    $namelist_opts{'stream'} = $stream;

    # Determine stream txt file and update the streams_namelists hash for the new stream
    my $outstream = "dwav.streams.txt" . ".$stream" . "$inst_string";

    # Create hash to initialze streams object
    my %stream_template_opts;
    BuildNamelistUtils::create_stream_file($caseroot, $confdir, \%xmlvars, $defaults, 
					   \%namelist_opts, \%stream_template_opts, \%streams_namelists, 
					   $stream, $outstream, $fh_out);
}
$fh_out->close;

#########################################################
# namelist group: shr_strdata_nml (in file docn_ocn_in) #
#########################################################

#FIXME - note that"${WAV_DOMAIN_PATH}/${WAV_DOMAIN_FILE}") is not sent as an argument
# to create_shr_strdata_nml and in fact domainfile does not appear in the namelist - WHY?

BuildNamelistUtils::create_shr_strdata_nml('dwav', $nl, $defaults, $definition, 
					   \%namelist_opts, \%streams_namelists, 
					   $DIN_LOC_ROOT);

#########################################################
# namelist group: dwav_nml (in file dwav_in)            #
#########################################################

BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'wav_in', "dwav_wav_in${inst_string}");

BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'decomp',    '1d');

BuildNamelistUtils::add_default($definition, $defaults, $DIN_LOC_ROOT, 
				$nl, 'force_prognostic_true', '.false.');

##########################################################
# Write output files
##########################################################

BuildNamelistUtils::write_output_files('wav', $nl, $definition, $DIN_LOC_ROOT, $caseroot); 
