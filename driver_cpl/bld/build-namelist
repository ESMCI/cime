#!/usr/bin/env python

"""Namelist creator for CIME's driver.

While `build-namelist` historically has been a script in its own right, this
module can be imported, and provides the same functionality via the
`build_namelist` function.
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os
import shutil
import sys

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect, handle_standard_logging_options, setup_standard_logging_options 
from CIME.utils import run_cmd_no_fail

logger = logging.getLogger(__name__)

###############################################################################
def parse_input(argv):
###############################################################################

    if "--test" in argv:
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    parser = argparse.ArgumentParser()

    setup_standard_logging_options(parser)

    parser.add_argument("--caseroot", required=True, 
                        help="Case diretory")

    parser.add_argument("--cimeroot", required=True,
                        help="CIMEROOT directory")

    parser.add_argument("--confdir", required=True,
                        help="Configuration directory where namelists are generated")

    parser.add_argument("--infile", required=True,
                        help="File containing user-modified namelists settings")

    parser.add_argument("--user_xml_dir", required=True,
                        help="File containing user modified namelist_defaults and namelist_definition files")

    args = parser.parse_args()

    handle_standard_logging_options(args)

    return args.caseroot, args.confdir, args.cimeroot, args.infile, args.user_xml_dir

###############################################################################
def _create_group_seq_cplflds_inparm(case, nmlgen):
###############################################################################
    config = {}

    config['BGC_MODE'] = case.get_value("CCSM_BGC")
    nmlgen.add_default('flds_co2a', value=nmlgen.get_default('flds_co2a', config=config))
    nmlgen.add_default('flds_co2b', value=nmlgen.get_default('flds_co2b', config=config))
    nmlgen.add_default('flds_co2c', value=nmlgen.get_default('flds_co2c', config=config))
    nmlgen.add_default('flds_co2_dmsa', value=nmlgen.get_default('flds_co2_dmsa', config=config))
    nmlgen.add_default('flds_bgc', value=nmlgen.get_default('flds_bgc', config=config))

    config['CPL_I2O_PER_CAT'] = case.get_value('CPL_I2O_PER_CAT')
    nmlgen.add_default('ice_ncat')
    nmlgen.add_default('seq_flds_i2o_per_cat', value=nmlgen.get_default('seq_flds_i2o_per_cat', config=config))

    glc_nec = case.get_value('GLC_NEC')
    if glc_nec is None:
        glc_nec = 0
    nmlgen.add_default('glc_nec', value=glc_nec)

###############################################################################
def _create_group_seq_infodata_inparm(case, nmlgen):
###############################################################################
    config = {}

    nmlgen.add_default('case_name')
    nmlgen.add_default('case_desc')
    nmlgen.add_default('username')
    nmlgen.add_default('hostname')
    nmlgen.add_default('atm_gnam')
    nmlgen.add_default('lnd_gnam')
    nmlgen.add_default('ocn_gnam')
    nmlgen.add_default('ice_gnam')
    nmlgen.add_default('rof_gnam')
    nmlgen.add_default('glc_gnam')
    nmlgen.add_default('wav_gnam')

    start_type = case.get_value('RUN_TYPE')
    if start_type == 'hybrid':
        start_type = 'startup'
    if case.get_value('CONTINUE_RUN') == 'TRUE':
        start_type = "continue"
    nmlgen.add_default('start_type', value=start_type)

    nmlgen.add_default('brnch_retain_casename', value='.false.')
    if start_type != 'startup':
        if case.get_value('CASE') == case.get_value('RUN_REFCASE'):
            nmlgen.add_default('brnch_retain_casename', value='.true.')
        
    config['COMP_RUN_BARRIERS'] = case.get_value('COMP_RUN_BARRIERS')
    nmlgen.add_default('run_barriers', value=nmlgen.get_default('run_barriers', config=config))
        
    config['DRV_THREADING'] = case.get_value('DRV_THREADING')
    nmlgen.add_default('drv_threading', value=nmlgen.get_default('drv_threading', config=config))

    config['BFBFLAG'] = case.get_value('BFBFLAG')
    nmlgen.add_default('bfbflag', value=nmlgen.get_default('bfbflag', config=config))

    config['CPL_ALBAV'] = case.get_value('CPL_ALBAV')
    nmlgen.add_default('flux_albav', value=nmlgen.get_default('flux_albav', config=config))

    config['CPL_EPBAL'] = case.get_value('CPL_EPBAL')
    nmlgen.add_default('flux_epbal', value=nmlgen.get_default('flux_epbal', config=config))

    config['FLDS_WISO'] = case.get_value('FLDS_WISO')
    nmlgen.add_default('flds_wiso', value=nmlgen.get_default('flds_wiso', config=config))
   
    config['BUDGETS'] = case.get_value('BUDGETS')
    nmlgen.add_default('do_budgets', value=nmlgen.get_default('do_budgets', config=config))
    nmlgen.add_default('budget_inst')
    nmlgen.add_default('budget_daily')
    nmlgen.add_default('budget_month')
    nmlgen.add_default('budget_ann')
    nmlgen.add_default('budget_ltann')
    nmlgen.add_default('budget_ltend')

    nmlgen.add_default('cpl_seq_option')
    nmlgen.add_default('flux_diurnal')
    nmlgen.add_default('info_debug')
    nmlgen.add_default('cpl_decomp')
    nmlgen.add_default('wall_time_limit')
    nmlgen.add_default('force_stop_at')

    nmlgen.add_default('do_histinit')
    nmlgen.add_default('shr_map_dopole')
    nmlgen.add_default('cpl_cdf64')
    nmlgen.add_default('aoflux_grid')

    nmlgen.add_default('orb_mode')
    nmlgen.add_default('orb_iyear')
    nmlgen.add_default('orb_iyear_align')
    
    nmlgen.add_default('wv_sat_scheme')
    nmlgen.add_default('wv_sat_transition_start')
    nmlgen.add_default('wv_sat_use_tables')
    nmlgen.add_default('wv_sat_table_spacing')

    nmlgen.add_default('tfreeze_option')
    
    nmlgen.add_default('histaux_a2x')
    nmlgen.add_default('histaux_a2x3hr')
    nmlgen.add_default('histaux_a2x3hrp')
    nmlgen.add_default('histaux_a2x24hr')
    nmlgen.add_default('histaux_l2x')
    nmlgen.add_default('histaux_r2x')
    nmlgen.add_default('histaux_l2x1yr')

    nmlgen.add_default('histavg_atm')
    nmlgen.add_default('histavg_lnd')
    nmlgen.add_default('histavg_ocn')
    nmlgen.add_default('histavg_ice')
    nmlgen.add_default('histavg_rof')
    nmlgen.add_default('histavg_glc')
    nmlgen.add_default('histavg_wav')
    nmlgen.add_default('histavg_xao')
    
    nmlgen.add_default('vect_map')
    nmlgen.add_default('eps_frac')
    nmlgen.add_default('eps_amask')
    nmlgen.add_default('eps_agrid')
    nmlgen.add_default('eps_aarea')
    nmlgen.add_default('eps_omask')
    nmlgen.add_default('eps_ogrid')
    nmlgen.add_default('eps_oarea')

    nmlgen.add_default('mct_usealltoall')
    nmlgen.add_default('mct_usevector')

    nmlgen.add_default('timing_dir')
    nmlgen.add_default('tchkpt_dir')

    if case.get_value('PTS_MODE')  == "TRUE":
        nmlgen.add_default('single_column', ".true.")
        nmlgen.add_default('scmlat', value=case.get_value('PTS_LAT'))
        nmlgen.add_default('scmlon', value=case.get_value('PTS_LON'))

###############################################################################
def _create_group_seq_timemgr_inparm(case, nmlgen):
###############################################################################

    nmlgen.add_default('calendar', value=case.get_value('CALENDAR'))

    ncpl_base_period  = case.get_value('NCPL_BASE_PERIOD')
    if ncpl_base_period == 'hour':
        basedt = 3600
    elif ncpl_base_period == 'day':
        basedt = 3600 * 24
    elif ncpl_base_period == 'year':
        if case.get_value('CALENDAR') == 'NO_LEAP':
            basedt = 3600 * 24 * 365
        else:
            expect(False, "Invalid CALENDAR for NCPL_BASE_PERIOD %s " %ncpl_base_period) 
    elif ncpl_base_period == 'decade':
        if case.get_value('CALENDAR') == 'NO_LEAP':
            basedt = 3600 * 24 * 365 * 10
        else:
            expect(False, "invalid NCPL_BASE_PERIOD NCPL_BASE_PERIOD %s " %NCPL_BASE_PERIOD)
    else:
        expect(False, "invalid NCPL_BASE_PERIOD NCPL_BASE_PERIOD %s " %NCPL_BASE_PERIOD)

    if basedt < 0:
        expect(False, "basedt invalid overflow for NCPL_BASE_PERIOD %s " %NCPL_BASE_PERIOD)

    comps = ["atm", "lnd", "ice", "ocn", "glc", "rof", "wav"]
    for comp in comps:
        ncpl = case.get_value(comp.upper() + '_NCPL')
        cpl_dt = basedt / int(ncpl)
        totaldt = cpl_dt * int(ncpl)
        if totaldt != basedt:
            expect(false, " %s ncpl doesn't divide base dt evenly" %comp)
        nmlgen.add_default(comp + '_cpl_dt', value=cpl_dt)

    run_startdate = "".join(str(x) for x in case.get_value('RUN_STARTDATE').split('-'))
    nmlgen.add_default('start_ymd', value=run_startdate)
    nmlgen.add_default('start_tod')
    nmlgen.add_default('stop_option')
    nmlgen.add_default('stop_n')
    nmlgen.add_default('stop_ymd')
    nmlgen.add_default('restart_option')
    nmlgen.add_default('restart_n')
    nmlgen.add_default('restart_ymd')
    nmlgen.add_default('end_restart')
    nmlgen.add_default('history_option')
    nmlgen.add_default('history_n')
    nmlgen.add_default('history_ymd')
    nmlgen.add_default('histavg_option')
    nmlgen.add_default('histavg_n')
    nmlgen.add_default('histavg_ymd')
    nmlgen.add_default('barrier_option')
    nmlgen.add_default('barrier_n')
    nmlgen.add_default('barrier_ymd')
    nmlgen.add_default('tprof_option')
    nmlgen.add_default('tprof_n')

    # This would be better handled inside the alarm logic in the driver routines.
    # Here supporting only nday(s), nmonth(s), and nyear(s).
    tprofmult = 1
    tprofoption = 'never'
    stop_option = case.get_value('STOP_OPTION')
    if 'nyear' in stop_option:
        tprofoption = 'ndays'
        tprofmult = 365
    elif 'nmonth' in stop_option:
        tprofoption = 'ndays'
        tprofmult = 30
    elif 'nday' in stop_option:
        tprofoption = 'ndays'

    stop_date = case.get_value('STOP_DATE')
    tprof_total = case.get_value('TPROF_TOTAL')
    if ((tprof_total > 0) and (stop_date < 0) and ('ndays' in tprofoption)):
        stop_n = case.get_value('STOP_N')
        stopn = tprofmult * stop_N
        tprofn = int(stopn / tprof_total)
        if tprofn < 1: 
            tprofn = 1
        nmlgen.add_default('tprof_option', value="tprofoption")
        nmlgen.add_default('tprof_n', value="tprofn")
    else:
        nmlgen.add_default('tprof_option')
        nmlgen.add_default('tprof_n')

    nmlgen.add_default('tprof_ymd')
    nmlgen.add_default('max_cplstep_time')

###############################################################################
def _create_group_ccsm_pes(case, nmlgen):
###############################################################################
    comps = ["atm", "lnd", "ice", "ocn", "glc", "rof", "wav", "esp", "cpl"]
    for comp in comps:
        nmlgen.add_default( comp + '_ntasks')
        nmlgen.add_default( comp + '_nthreads')
        nmlgen.add_default( comp + '_rootpe')
        nmlgen.add_default( comp + '_pestride')
        if comp != 'cpl':
            nmlgen.add_default( comp + '_layout')

###############################################################################
def _create_group_prof_inparm(case, nmlgen):
###############################################################################
    config = {}

    config['MACH'] = case.get_value('MACH')
    config['MPILIB'] = case.get_value('MPILIB')
    config['OS'] = case.get_value('OS')

    if case.get_value('TIMER_DETAIL') >= 1:
        config["TIMER_DETAIL_LOGICAL"] = "pos"
    if case.get_value('TIMER_LEVEL_LOGICAL') >= 1:
        config["TIMER_LEVEL_LOGICAL"] = "pos"
    if case.get_value('PROFILE_PAPI_ENABLE'):
        config['PROFILE_PAPI_ENABLE'] = 'On'

    nmlgen.add_default('profile_disable', value=nmlgen.get_default('profile_disable', config=config))
    nmlgen.add_default('profile_depth_limit', value=nmlgen.get_default('profile_depth_limit', config=config))
    nmlgen.add_default('profile_detail_limit', value=nmlgen.get_default('profile_detail_limit', config=config))
    nmlgen.add_default('profile_papi_enable', value=nmlgen.get_default('profile_papi_enable', config=config))
    nmlgen.add_default('profile_timer', value=nmlgen.get_default('profile_timer', config=config))
    nmlgen.add_default('profile_global_stats')
    nmlgen.add_default('profile_single_file')
    nmlgen.add_default('profile_barrier')
    nmlgen.add_default('profile_outpe_num')
    nmlgen.add_default('profile_ovhd_measurement')

###############################################################################
def _create_group_papi_inparm(case, nmlgen):
###############################################################################
    nmlgen.add_default('papi_ctr1_str')
    nmlgen.add_default('papi_ctr2_str')
    nmlgen.add_default('papi_ctr3_str')
    nmlgen.add_default('papi_ctr4_str')

###############################################################################
def _create_group_pio_default_inparm(case, nmlgen):
###############################################################################
    config = {}

    if case.get_value('PIO_ASYNC_INTERFACE'):
         config['PIO_ASYNC_INTERFACE'] = 'On'
    if case.get_value('PIO_REARR_COMM_ENABLE_HS_COMP2IO'):
        config['PIO_REARR_COMM_ENABLE_HS_COMP2IO'] = 'On'
    if case.get_value('PIO_REARR_COMM_ENABLE_ISEND_COMP2IO'):
        config['PIO_REARR_COMM_ENABLE_ISEND_COMP2IO'] = 'On'
    if case.get_value('PIO_REARR_COMM_ENABLE_HS_IO2COMP'):
        config['PIO_REARR_COMM_ENABLE_HS_IO2COMP'] = 'On'
    if case.get_value('PIO_REARR_COMM_ENABLE_ISEND_IO2COMP'):
        config['PIO_REARR_COMM_ENABLE_ISEND_IO2COMP'] = 'On'

    nmlgen.add_default('pio_async_interface', value=nmlgen.get_default('pio_async_interface', config=config))
    nmlgen.add_default('pio_stride')
    nmlgen.add_default('pio_root')
    nmlgen.add_default('pio_rearranger')
    nmlgen.add_default('pio_numiotasks')
    nmlgen.add_default('pio_typename')
    nmlgen.add_default('pio_debug_level')
    nmlgen.add_default('pio_blocksize')
    nmlgen.add_default('pio_buffer_size_limit') 
    if case.get_value('PIO_VERSION') == 1:
        nmlgen.add_default('pio_rearr_comm_type')
        nmlgen.add_default('pio_rearr_comm_fcd')
        nmlgen.add_default('pio_rearr_comm_max_pend_req_comp2io')
        nmlgen.add_default('pio_rearr_comm_enable_hs_comp2io', 
                           value=nmlgen.get_default('pio_rearr_comm_enable_hs_comp2io', config=config))
        nmlgen.add_default('pio_rearr_comm_enable_isend_comp2io')
        nmlgen.add_default('pio_rearr_comm_max_pend_req_io2comp')
        nmlgen.add_default('pio_rearr_comm_enable_hs_io2comp')
        nmlgen.add_default('pio_rearr_comm_enable_isend_io2comp')

    # Note: pio_async_interface=.true. is not yet supported
    # If pio_async_interface is .true. or {component}_PIO_* variable is not set or set to -99
    # the component variable will be set using the pio_* value.

###############################################################################
def _create_group_seq_maps(case, nmlgen):
###############################################################################

    config = {}
    config['BFBFLAG'] = case.get_value('BFBFLAG')

    items = ['atm2ocn_fmapname', 'atm2ocn_smapname', 'atm2ocn_vmapname', 'ocn2atm_fmapname',
             'ocn2atm_smapname', 'atm2lnd_fmapname', 'atm2lnd_smapname', 'lnd2atm_fmapname',
             'lnd2atm_smapname', 'lnd2rof_fmapname', 'rof2lnd_fmapname', 'rof2ocn_fmapname',
             'rof2ocn_rmapname', 'glc2ocn_rmapname', 'glc2ice_rmapname', 'lnd2glc_fmapname', 
             'lnd2glc_smapname', 'glc2lnd_fmapname', 'glc2lnd_smapname', 'atm2wav_smapname',
             'ocn2wav_smapname', 'ice2wav_smapname', 'wav2ocn_smapname', 'atm2ice_fmapname',
             'atm2ice_smapname', 'atm2ice_vmapname', 'ice2atm_fmapname', 'ice2atm_smapname',
             'atm2ocn_fmaptype', 'atm2ocn_smaptype', 'atm2ocn_vmaptype', 'ocn2atm_fmaptype',
             'ocn2atm_smaptype', 'atm2lnd_fmaptype', 'atm2lnd_smaptype', 'lnd2atm_fmaptype', 
             'lnd2atm_smaptype', 'lnd2rof_fmaptype', 'rof2lnd_fmaptype', 'rof2ocn_fmaptype',
             'rof2ocn_rmaptype', 'glc2ocn_rmaptype', 'glc2ice_rmaptype', 'lnd2glc_fmaptype',
             'lnd2glc_smaptype', 'glc2lnd_fmaptype', 'glc2lnd_smaptype', 'atm2wav_smaptype',
             'ocn2wav_smaptype', 'ice2wav_smaptype', 'wav2ocn_smaptype']

    for item in items:
        nmlgen.add_default(item, nmlgen.get_default(item, config=config))

###############################################################################
def _create_component_modelio_namelists(case, confdir, definition_files, defaults_files):
###############################################################################

    # will need to create a new namelist generator
    infiles = []
    config = {}
    nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files,  config)

    models = ["cpl", "atm", "lnd", "ice", "ocn", "glc", "rof", "wav", "esp"]

    lid = os.environ["LID"] if "LID" in os.environ else run_cmd_no_fail("date +%y%m%d-%H%M%S")

    for model in models:
        moddiri = case.get_value('EXEROOT') + "/" + model
        moddiro = case.get_value('RUNDIR')

        if model == 'cpl':
            inst_count = 1
        else:
            inst_count = case.get_value("NINST_" + model.upper())

        inst_index = 1;
        while inst_index <= inst_count:
            inst_string = inst_index
            if inst_index <= 999:
                inst_string = "0" + str(inst_string)
            if inst_index <=  99:
                inst_string = "0" + str(inst_string)
            if inst_index <=  9:
                inst_string = "0" + str(inst_string)

            if inst_count > 1:
                modelio_file = model + "_modelio.nml_" + str(inst_string)
                logfile = model + inst_string + ".log." + str(lid)
            else:
                modelio_file = model + "_modelio.nml"
                logfile = model + ".log." + str(lid)

            nmlgen.add_default('diri',    value=moddiri)
            nmlgen.add_default('diro',    value=moddiro)
            nmlgen.add_default('logfile', value=logfile)
            
            nmlgen.add_default('pio_stride',    case.get_value(model.upper() + '_PIO_STRIDE'))
            nmlgen.add_default('pio_root',      case.get_value(model.upper() + '_PIO_ROOT'))
            nmlgen.add_default('pio_numiotasks',case.get_value(model.upper() + '_PIO_NUMTASKS'))
            nmlgen.add_default('pio_typename',  case.get_value(model.upper() + '_PIO_TYPENAME'))
            nmlgen.add_default('pio_rearranger',case.get_value(model.upper() + '_PIO_REARRANGER'))

            nmlgen.write_modelio_file(modelio_file)
            inst_index = inst_index + 1

####################################################################################
def _create_driver_namelist(case, confdir, infile, definition_files,  defaults_files):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`. 
    The `confdir` argument is used to specify the directory
    in which output files will be placed.
    """
    #----------------------------------------------------
    # Construct the namelist generator.
    #----------------------------------------------------
    infiles = [infile]
    config = {}
    nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files,  config)

    #----------------------------------------------------
    # Construct the namelist groups
    #----------------------------------------------------

    # create namelist group: seq_cplflds_userspec
    # nmlgen.add_default('cplflds_custom', value='') FIXME - this is not returning cplflds_custom = ' '

    # crate namelist group: seq_cplflds_inparm      
    _create_group_seq_cplflds_inparm(case, nmlgen)

    # create namelist group: seq_infodata_inparm      
    _create_group_seq_infodata_inparm(case, nmlgen)

    # create namelist group: seq_timemgr_inparm      
    _create_group_seq_timemgr_inparm(case, nmlgen)

    # create namelist group: ccsm_pes
    _create_group_ccsm_pes(case, nmlgen)
    
    # create namelist group: prof_inparm (in utils/timing/perf_mod.F90)
    _create_group_prof_inparm(case, nmlgen)

    # create namelist group: papi_inparm (in utils/timing/perf_mod.F90)
    _create_group_papi_inparm(case, nmlgen)

    # create namelist group: pio_default_inparm        
    _create_group_pio_default_inparm(case, nmlgen)

    # create group seq_maps that will go into file seq_map.rc
    _create_group_seq_maps(case, nmlgen)

    #-----------------------------------------------------------------------------------------------
    # (1) Write output namelist files (drv_in, and drv_flds_in)
    #     Write out model_modelio.nml files
    #     Write input dataset list.
    #-----------------------------------------------------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "cpl.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    namelist_file = os.path.join(confdir, "drv_in")
    modelio_file = os.path.join(confdir, "drv_modelio.nml")
    nmlgen.write_output_file(namelist_file, data_list_path )

    #-----------------------------------------------------------------------------------------------
    # (2) Write out seq_map.rc file
    #-----------------------------------------------------------------------------------------------
    seq_maps_file = os.path.join(confdir, "seq_maps.rc")
    nmlgen.write_seq_maps(seq_maps_file)

    #-----------------------------------------------------------------------------
    # (3) Write drv_flds_in
    #-----------------------------------------------------------------------------
    # In thte following, all values come simply from the infiles - no default values need to be added
    # FIXME - do want to add the possibility that will use a user definition file for drv_flds_in

    cimeroot = case.get_value('CIMEROOT')
    caseroot = case.get_value('CASEROOT')

    namelist_file = os.path.join(confdir, "drv_flds_in")
    nmlgen.add_default('drv_flds_in_files' )
    drvflds_files = nmlgen.get_default('drv_flds_in_files')
    infiles = []
    for drvflds_file in drvflds_files:
        infile = os.path.join(caseroot, drvflds_file)
        if os.path.isfile(infile):
            infiles.append(infile)

    if len(infiles) != 0:
        config = {}
        definition_files = [os.path.join(cimeroot, "driver_cpl", "bld", "namelist_files", "namelist_definition_drv_flds_v2.xml")]
        defaults_files = [os.path.join(cimeroot, "driver_cpl", "bld", "namelist_files", "namelist_definition_drv_v2.xml")]
        nmlgen = NamelistGenerator(case, infiles, definition_files, defaults_files,  config)
        groups = nmlgen._namelist.get_group_names()
        drv_flds_in = os.path.join(caseroot, "CaseDocs", "drv_flds_in")
        nmlgen.write_output_file(drv_flds_in)

###############################################################################
def _main_func():
###############################################################################

    caseroot, confdir, cimeroot, infiles, user_xml_dir = parse_input(sys.argv)

    # Figure out where definition/defaults files are.
    namelist_xml_dir = os.path.join(cimeroot, "driver_cpl", "bld", "namelist_files")
    definition_file_basename = "namelist_definition_drv_v2.xml"
    definition_files = [os.path.join(namelist_xml_dir, definition_file_basename)]
    user_definition = os.path.join(user_xml_dir, definition_file_basename)

    # User definition *replaces* existing definition.
    if os.path.isfile(user_definition):
        definition_files = [user_definition]
    defaults_file_basename = "namelist_defaults_drv.xml"
    defaults_files = [os.path.join(namelist_xml_dir, defaults_file_basename)]
    user_defaults = os.path.join(user_xml_dir, defaults_file_basename)

    # User defaults *extends* existing defaults.
    if os.path.isfile(user_defaults):
        defaults_files.append(user_defaults)
    for file_ in definition_files + defaults_files:
        expect(os.path.isfile(file_),
               "Namelist XML file %s not found!" % file_)

    # Now build the component namelist and required stream txt files
    with Case(caseroot) as case:
        _create_driver_namelist(case, confdir, infiles, definition_files, defaults_files)
        _create_component_modelio_namelists(case, confdir, definition_files, defaults_files)

###############################################################################

if __name__ == "__main__":
    _main_func()

