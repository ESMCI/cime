#!/usr/bin/env python

"""
build data model namelist input
"""
import sys, os, time, shutil, glob

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(os.environ["CIMEROOT"],"scripts","Tools"))

from standard_script_setup import *
from CIME.case             import Case
from CIME.buildnml_utils   import create_namelist_infile, parse_input
from CIME.utils            import expect, run_cmd, get_model

logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot = parse_input(sys.argv)

    with Case(caseroot) as case:
        cimeroot = case.get_value("CIMEROOT")
        caseroot = case.get_value("CASEROOT")
        casebuild = case.get_value("CASEBUILD")
        rundir = case.get_value("RUNDIR")

        confdir = os.path.join(casebuild, "cplconf")
        if not os.path.isdir(confdir):
            os.makedirs(confdir)

        # create cplconf/namelist
        infile_text = ""
        if case.get_value('COMP_ATM') == 'cam':
            # cam is actually changing the driver namelist settings
            cam_config_opts = case.get_value("CAM_CONFIG_OPTS")
            if "adiabatic" in cam_config_opts:
                infile_text = "atm_adiabatic = .true."
            if "ideal" in cam_config_opts:
                infile_text = "atm_ideal_phys = .true."
            if "aquaplanet" in cam_config_opts:
                infile_text = "aqua_planet = .true. \n aqua_planet_sst = 1"

        user_nl_file = os.path.join(caseroot, "user_nl_cpl")
        namelist_infile = os.path.join(confdir, "namelist_infile")
        create_namelist_infile(case, user_nl_file, namelist_infile, infile_text)

    user_xml_dir = os.path.join(caseroot, "SourceMods", "src.drv")
    expect (os.path.isdir(user_xml_dir),
            "user_xml_dir %s does not exist " %user_xml_dir)

    # call build-namelist
    cime_model = get_model()
    command = os.path.join(cimeroot, "driver_cpl", "cime_config", "build-namelist")
    cmd = "%s --confdir %s --caseroot %s --cimeroot %s  --infile %s --user_xml_dir %s --cime_model %s" \
        % (command, confdir, caseroot, cimeroot, namelist_infile, user_xml_dir, cime_model)

    rc, out, err = run_cmd(cmd, from_dir=confdir)
    expect(rc==0,"Command %s failed rc=%d\nout=%s\nerr=%s"%(cmd,rc,out,err))
    if out is not None and len(out) > 0:
        logger.debug("cmd=%s"%cmd)
        logger.info("out = %s"%out)
    if err is not None and len(err) > 0:
        logger.info("err= %s"%err)

    # copy drv_in, drv_flds_in, seq_maps.rc and all *modio* files to rundir

    shutil.copy(os.path.join(confdir,"drv_in"), rundir)

    drv_flds_in = os.path.join(confdir, "drv_flds_in")
    if os.path.isfile(drv_flds_in):
        shutil.copy(drv_flds_in, rundir)  

    shutil.copy(os.path.join(confdir,"seq_maps.rc"), rundir)
    for filename in glob.glob(os.path.join(confdir, "*modelio*")):
        shutil.copy(filename, rundir)

###############################################################################

if __name__ == "__main__":
    _main_func()
