#!/usr/bin/env perl

use strict;
use XML::LibXML;
use Getopt::Long;

my $xml = XML::LibXML->new( no_blanks => 1)->parse_file("env_case.xml");
my @nodes = $xml->findnodes(".//entry[\@id=\"CIMEROOT\"]");
my $cimeroot = $nodes[0]->getAttribute('value');
my %opts=(loglevel=>"INFO");
$ENV{CIMEROOT}=$cimeroot;
unshift @INC, "$cimeroot/utils/perl5lib";
my $pypath = $ENV{PYTHONPATH};
$ENV{PYTHONPATH} = "$cimeroot/utils/python:$cimeroot/scripts/Tools:$pypath";

require Log::Log4perl;
require Config::SetupTools;
require Batch::BatchUtils;
require Module::ModuleLoader;
my $logger;
my %config;
# Get options, if any..
sub opts()
{
    GetOptions( "resubmit" => \$opts{'resubmit'},
                "scriptname=s"  => \$opts{'scriptname'},
	        "loglevel=s"       => \$opts{loglevel});
}


sub main
{
    &opts();

    my $level = Log::Log4perl::Level::to_priority($opts{loglevel});
    Log::Log4perl->easy_init({level=>$level,
			      layout=>'%m%n'});
    $logger = Log::Log4perl::get_logger();

    %config	= SetupTools::getAllResolved();
    my $machine	= $config{'MACH'};
    my $machroot	= $config{'MACHDIR'};
    my $compiler	= $config{'COMPILER'};
    my $mpilib	= $config{'MPILIB'};
    my $caseroot	= $config{'CASEROOT'};
    my $case	= $config{'CASE'};
    my $model       = $config{'MODEL'};
    my $debug       = $config{'DEBUG'};
    # Check the case only once..
    if(!$opts{resubmit}){
	$logger->info( "checking the case..");
	system("./check_case -loglevel $opts{loglevel}");
	if($?)
	{
	    $logger->error( "check_case failed");
	    exit(-1);
	}
    }

    my $moduleloader = Module::ModuleLoader->new(machine  => $machine,
						 compiler => $compiler,
						 mpilib   => $mpilib,
						 debug    => $debug,
						 caseroot => $caseroot,
						 cimeroot => $cimeroot,
						 model    => $model);

    $moduleloader->moduleInit();

    $moduleloader->findModulesForCase();
    $moduleloader->loadModules();



    my $job;
    if(defined $config{TESTCASE}){
	$job = "test";
    }else{
	$job = "run";
    }
    $logger->debug( "Job = $job");
    my $batchutils = Batch::BatchUtilsFactory::getBatchUtils( case	   => $case,
							      caseconfig   => \%config,
							      caseroot	   => $caseroot,
							      cimeroot	   => $cimeroot,
							      compiler	   => $compiler,
							      machine	   => $machine,
							      machroot	   => $machroot,
							      mpilib	   => $mpilib,
	                                                      job                => $job);


    if(defined $opts{'resubmit'})
    {
	if( $batchutils->{batchtype} eq 'none'){
	    exit;
	}

        if(! defined $opts{'scriptname'})
        {
            $logger->logdie ("$config{'CASE'}.submit: resubmit option given without scriptname provided, aborting!");
        }
	`./xmlchange --noecho RUN_WITH_SUBMIT=TRUE`;
	$config{RUN_WITH_SUBMIT}='TRUE';
	$batchutils->doResubmit($opts{'scriptname'});
    }
    else
    {
        $batchutils->dependencyCheck();
	my $loopcnt=1;
	if($batchutils->{batchtype} eq 'none'){
	    $loopcnt = $config{RESUBMIT}+1;
	}
	for(my $resub=0; $resub < $loopcnt; $resub++){
	    check_DA_settings();
	    `./xmlchange --noecho  RUN_WITH_SUBMIT=TRUE`;
	    $config{RUN_WITH_SUBMIT}='TRUE';
	    $batchutils->submitJobs();
	    if($batchutils->{batchtype} eq 'none'){
		$batchutils->_decrementResubmitCounter(\%config);
	    }
	}
    }

}

sub check_DA_settings
{
    if($config{DATA_ASSIMILATION} eq "TRUE"){
	my $script = $config{DATA_ASSIMILATION_SCRIPT};
	$logger->info( "DATA_ASSIMILATION enabled");
	$logger->info ("   using script $script");
	$logger->info ("   DATA_ASSIMILATION_CYCLES = $config{DATA_ASSIMILATION_CYCLES}");
    }
}

sub doResubmit()
{
    my $scriptname = shift;
    my $job;
# This gets the extension (everything after the last . ) in $scriptname
    $scriptname =~ /\.([^\.]+)$/;
    $job = $1;
    my $batchutils = Batch::BatchUtilsFactory::getBatchUtils( case => $config{'CASE'},
                                                              caseconfig => \%config,
                                                              cimeroot => $config{'CIMEROOT'},
                                                              compiler => $config{'COMPILER'},
                                                              machine =>  $config{'MACH'},
                                                              machroot => $config{'MACHDIR'},
                                                              mpilib   => $config{'MPILIB'},
	                                                      job => $job);

    $batchutils->doResubmit($scriptname);
}

main(@ARGV) ;
