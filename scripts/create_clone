#!/usr/bin/env python

from Tools.standard_script_setup import *

from CIME.utils import expect
from CIME.case  import Case

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args):
###############################################################################
    parser = argparse.ArgumentParser()

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--case", "-case", required=True,
                        help="(required) Specify a new case name. "
                        "If not a full pathname, then the case is created "
			"under then current working directory ")

    parser.add_argument("--clone", "-clone", required=True,
                        help="(required) Specify a case to be cloned."
                        "If not a full pathname, then the case to be cloned"
                        "is assumed to be under then current working directory ")

    parser.add_argument("--user-mods-dir",
                        help="Path to directory with user_nl_* files and xmlchange "
                        "commands to utilize. This can also include SourceMods. "
                        "This can be an absolute path, a path relative to the "
                        "current directory, or a path relative to "
                        "cime_config/usermods_dirs/ under the primary component "
                        "for the given compset (for example, in an F compset "
                        "whose primary component is cam, '--user-mods-dir foo' "
                        "could be found in $SRCROOT/components/cam/cime_config/usermods_dirs/foo). "
                        "If this argument is used in conjunction with the --keepexe flag, then "
                        "no changes will be permitted to the env_build.xml in the --case entry directory. ")

    parser.add_argument("--keepexe", "-keepexe", action="store_true",
                        help="Sets EXEROOT to point to original build, it is highly recommended"
                        "that the original case be built before cloning if using the --keepexe flag "
                        "This flag will make SourceMods in the --case entry directory a symbolic link "
                        " to the SourceMods in the --clone entry directory ")

    parser.add_argument("--mach-dir", "-mach_dir",
                        help="Specify the locations of the Machines directory, other than the default"
                        "The default is CIMEROOT/machines")

    parser.add_argument("--project", "-project",
                        help="Specify a project id"
			"default: user-specified environment variable PROJECT or ACCOUNT"
			"or read from ~/.cesm_proj or ~/.ccsm_proj")

    parser.add_argument("--cime-output-root",
                        help="Specify the root output directory"
			"default: setting in case, create_clone will fail if this directory is not writable")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    if args.case is None:
        expect(False,
               "Must specify -case as an input argument")

    if args.clone is None:
        expect(False,
               "Must specify -clone as an input argument")

    return args.case, args.clone, args.keepexe, args.mach_dir, args.project, \
        args.cime_output_root, args.user_mods_dir

##############################################################################
def _main_func():
###############################################################################

    case, clone, keepexe, mach_dir, project, cime_output_root, user_mods_dir = parse_command_line(sys.argv)

    cloneroot = os.path.abspath(clone)
    expect(os.path.isdir(cloneroot),
           "Missing cloneroot directory %s " % cloneroot)

    if user_mods_dir is not None:
        if os.path.isdir(user_mods_dir):
            user_mods_dir = os.path.abspath(user_mods_dir)

    with Case(cloneroot, read_only=False) as clone:
        clone.create_clone(case, keepexe=keepexe, mach_dir=mach_dir,
                           project=project,
                           cime_output_root=cime_output_root,
                           user_mods_dir=user_mods_dir)

###############################################################################

if __name__ == "__main__":
    _main_func()
