#!/usr/bin/env perl 

#-----------------------------------------------------------------------------------------------
#
# manage_compsets
#
# This utility allows the users to manage and query model component sets  
#
#-----------------------------------------------------------------------------------------------

use XML::LibXML;
use IO::File;
use Data::Dumper;
use Getopt::Long;
use POSIX qw(strftime);
use Cwd qw(getcwd abs_path chdir);
use File::Basename;
use strict;

# Check for the existence of XML::LibXML in whatever perl distribution happens to be in use.  
# If not found, print a warning message then exit. 
eval {
    require XML::LibXML;
    XML::LibXML->import();
};
if($@)
{
    my $warning = <<END;
WARNING:
    The perl module XML::LibXML is needed for XML parsing in the CESM script system.  
	Please contact your local systems administrators or IT staff and have them install it for 
	you, or install the module locally.  

END
    print "$warning\n";
    exit(1);
}

#-----------------------------------------------------------------------------------------------
# Setting autoflush (an IO::Handle method) on STDOUT helps in debugging.  It forces the test
# descriptions to be printed to STDOUT before the error messages start.
*STDOUT->autoflush();                  

#-----------------------------------------------------------------------------------------------
# Set the directory that contains the CESM configuration scripts.  If the create_newcase command was
# issued using a relative or absolute path, that path is in $ProgDir.  Otherwise assume the
# command was issued from the current working directory.

(my $ProgName = $0) =~ s!(.*)/!!;      # name of this script
my $ProgDir = $1;                      # name of directory containing this script -- may be a
                                       # relative or absolute path, or null if the script is in
                                       # the user's PATH
my $cwd = getcwd();                    # current working directory
my $cfgdir;                            # absolute pathname of directory that contains this script
if ($ProgDir) { 
    $cfgdir = abs_path($ProgDir);
} else {
    $cfgdir = $cwd;
}

#-----------------------------------------------------------------------------------------------
if ($#ARGV == -1) {
    usage();
}
#-----------------------------------------------------------------------------------------------

sub usage {
    die <<EOF;

SYNOPSIS
  manage_case -model [options] -query  [options]

OPTIONS
  User supplied values are denoted in angle brackets (<>).  Any value that contains
  white-space must be quoted.  Long option names may be supplied with either single
  or double leading dashes.  A consequence of this is that single letter options may
  NOT be bundled.

  -model [cesm, acme]
  -query compsets -setby [cam, clm, cice, cism, pop, allactive] (if model is CESM)
  -query component -name [cam, clm, cice, cism, pop, datm, dlnd, dice, dglc, docn] (if model is CESM)
  -query grids
  -query machines

EOF
}

#-----------------------------------------------------------------------------------------------
# Save commandline
my $commandline = "create_newcase @ARGV";

#-----------------------------------------------------------------------------------------------
# Parse command-line options.
my %opts = ( );
GetOptions(
    "h|help"            => \$opts{'help'},
    "query=s"           => \$opts{'query'},
    "model=s"           => \$opts{'model'},
    "setby=s"		=> \$opts{'setby'},
    "name=s"            => \$opts{'name'},
    "v|verbose"         => \$opts{'verbose'},
    )  or usage();

# Give usage message.
usage() if $opts{'help'};

# Check for unparsed argumentss
if (@ARGV) {
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

#-----------------------------------------------------------------------------------------------
# Set $cimeroot and $srcroot
my $cimeroot = abs_path("$cfgdir/../");
(-d "$cimeroot")  or  die <<"EOF";
** Cannot find cimeroot directory \"$cimeroot\" **
EOF
my $srcroot  = abs_path("$cimeroot/../");
(-d "$srcroot")  or  die <<"EOF";
** Cannot find srcroot directory \"$srcroot\" **
EOF

my $model = $opts{'model'};
if (! defined $model) {
    die "ERROR: must specify -model argument \n";
}

my $query_option = $opts{'query'};
if (! defined $query_option) {
    die "Must specify query option as an argument  \n";
} else {
    my $found;
    foreach my $value ('compsets', 'component', 'grids', 'machines') {
	if ($query_option eq $value) {
	    $found = $value;
	    last;
	}
    }
    if (! defined $found) {
	die "ERROR: Query argument must be one of 'compsets','compenent', 'grids', or machines' \n";
    }
}

my $file_config = "$cimeroot/cime_config/${model}/config_files.xml";
(-f "$file_config")  or  die "*** Cannot find model specification file $file_config ***\n\n";
my $xml = XML::LibXML->new( no_blanks => 1)->parse_file("$file_config");

if ($query_option eq "compsets") 
{
    _queryCompsets($model, $cimeroot, $srcroot, $xml, $opts{'setby'}); 
} 
elsif ($query_option eq "component") 
{
    _queryComponent($model, $cimeroot, $xml, $opts{'name'}); 
} 
elsif ($query_option eq "grids") 
{
    _queryGrids($model, $cimeroot, $xml)
}
elsif ($query_option eq "machines") 
{
    _queryMachines($model, $cimeroot, $xml)
} 
else 
{
    print "** Bad argument to the query option: $query_option \n";
    print "** Valid options: compsets, component, grids or machines ** \n";
    die;
}
exit 0;


#-----------------------------------------------------------------------------------------------
#                               Private routines
#-----------------------------------------------------------------------------------------------
sub _queryCompsets
{
    # Query the supported compsets for the primary component
    my ($model, $cimeroot, $srcroot, $xml_config, $setby) = @_;

    my @choices;
    foreach my $component ($xml_config->findnodes(".//entry[\@id=\"COMPSETS_SPEC_FILE\"]/values/value")) {
	push (@choices, $component->getAttribute('component'));
    }
    if (! defined $setby) {
	die "ERROR: Must also specify a -setby argument, possible choices for $model are: \n  @choices \n";
    } 
    my @files = $xml_config->findnodes(".//entry[\@id=\"COMPSETS_SPEC_FILE\"]/values/value[\@component=\"$opts{'setby'}\"]");
    if ($#files == -1) {
	die " ERROR: no compsets specification file found for $setby \n";
    } 
    my $file = $files[0]->textContent();
    $file =~ s/\$CIMEROOT/$cimeroot/;
    $file =~ s/\$SRCROOT/$srcroot/;
    $file =~ s/\$MODEL/$model/;
    (-f "$file")  or  die "*** Cannot find compsets specification file $file ***\n\n";
    my $xml_compsets = XML::LibXML->new(no_blanks => 1)->parse_file($file);

    print " =============================================================\n";
    print " The following are the supported components sets in the file \n";
    print " $file \n";
    print " =============================================================\n";

    print " \n";
    foreach my $node ($xml_compsets->findnodes(".//help")) {
	my $help = $node->textContent();
	print "$help \n\n";
    }

    foreach my $node ($xml_compsets->findnodes(".//compset")) {
	my $grid     = $node->getAttribute('grid');
	my @lnames   = $node->findnodes("./lname");
	my @aliases  = $node->findnodes("./alias");
	my @supports = $node->findnodes("./support");

	my $lname   = $lnames[0]->textContent;
	my $alias   = $aliases[0]->textContent;
	my $support;
	if ($#supports > -1)  {
	    $support = $supports[0]->textContent;
	}
	printf("     alias: %-25s longname: %-96s \n",$alias,$lname);
        if ( $grid) {
        printf("                                                grid match:  %-96s \n", $grid );
        }
        if ($support) {
        printf("                                                support level    :  %-96s \n", $support );
        }
    }    
    print "\n";
}

#-----------------------------------------------------------------------------------------------
sub _queryComponent
{
    my ($model, $cimeroot, $xml_config, $component_name) = @_;
 
    my @choices;
    foreach my $name ('DRV', 'ATM', 'LND', 'ROF', 'OCN', 'GLC', 'WAV') {
	foreach my $node ($xml->findnodes(".//entry[\@id=\"CONFIG_${name}_FILE\"]/values/value")) {
	    push (@choices, $node->getAttribute('component'));
	}
    }
    if (! defined $component_name) {
	die "ERROR: must also specify a -name argument, possible choices for $model are \n   @choices \n";
    } else {
	my @files = $xml_config->findnodes(".//entry[\@id[contains(.,\"CONFIG\")]]/values/value[\@component=\"$opts{'name'}\"]");
	if ($#files == -1) {
	    die " ERROR: no component config_component.xml files found for component $component_name \n";
	} 
	my $file = $files[0]->textContent();
	$file =~ s/\$CIMEROOT/$cimeroot/;
	$file =~ s/\$SRCROOT/$srcroot/;
	(-f $file) or die "ERROR: component definition file $file is not present"; 

	my $xml = XML::LibXML->new( no_blanks => 1)->parse_file($file);
	foreach my $node ($xml->findnodes("//help")) {
	    my $value = $node->textContent();
	    print"     $value \n"; 
	}
	foreach my $node ($xml->findnodes("//description/*")) {
	    my $attr  = $node->getAttribute('compset');
	    my $value = $node->textContent();
	    printf("    %-25s => %-96s \n",$attr,$value);
	}
	print "\n";
    }
}

#-------------------------------------------------------------------------------
sub _queryGrids
{
    # Print all currently supported valid grids
    my ($model, $cimeroot, $xml_config) = @_;

    my @files = $xml_config->findnodes(".//entry[\@id=\"GRIDS_SPEC_FILE\"]/default_value");
    if ($#files == -1) {
	die " ERROR: in parsing $file_config for the GRIDS_SPEC_FILE node \n";
    } 
    my $file = $files[0]->textContent();
    $file =~ s/\$CIMEROOT/$cimeroot/;
    $file =~ s/\$MODEL/$model/;
    (-f "$file")  or  die "** Cannot find grids specification file $file ***\n";
    my $xml_grid = XML::LibXML->new( no_blanks => 1)->parse_file($file);

    print " \n";
    foreach my $node ($xml_grid->findnodes(".//help")) {
	my $help = $node->textContent();
	print "$help \n\n";
    }

    print "\n";
    print " ======================================================\n";
    print "                Component Grids:                       \n";
    print " ======================================================\n";
    print "\n";
    foreach my $node ($xml_grid->findnodes(".//domains/domain")) {
	my $name  = $node->getAttribute('name');
	my $alias = $node->getAttribute('alias');
	if ($alias) { 
	    print " component grid: $name (alias: $alias) \n";
	} else {
	    print " component grid: $name \n";
	}	    
	my $support; my $nx; my $ny; my $desc;
	foreach my $child_node ($node->childNodes()) {
	    my $name  = $child_node->nodeName();
	    my $value = $child_node->textContent();
	    if ($name eq 'support') {$support= $value;}
	    if ($name eq 'nx') {$nx = $value;}
	    if ($name eq 'ny') {$ny = $value;}
	    if ($name eq 'desc') {$desc = $value;}
	}
	if (defined $desc)    {print "   $desc \n";}
	if (defined $nx  )    {print "   nx: $nx ny: $ny \n";}
	if (defined $support) {print "   support_level: support_level \n";}
	print " \n";
    }

    print "\n";
    print " ======================================================\n";
    print "                Model Grids:                           \n";
    print " ======================================================\n";
    print "\n";
    foreach my $node ($xml_grid->findnodes(".//grids/grid")) {
	my $alias     = $node->getAttribute('alias');
	my $compset   = $node->getAttribute('compset');
	my $support   = $node->getAttribute('support');
	my $lname     = $node->textContent();
	print " model grid: $lname \n";
	if (defined ($alias)  ) { print "    alias        : $alias \n"}
	if (defined ($compset)) { print "    compset match: $compset \n"}
	if (defined ($support)) { print "    support level: $support \n";}
	print " \n";
    }    
    print " \n";
}
#-------------------------------------------------------------------------------
sub _queryMachines
{
    # Print all currently supported valid grids
    my ($model, $cimeroot, $xml_config) = @_;

    my @files = $xml_config->findnodes(".//entry[\@id=\"MACHINES_SPEC_FILE\"]/default_value");
    if ($#files == -1) {
	die " ERROR: in parsing $file_config for the MACHIENS_SPEC_FILE node \n";
    } 
    my $file = $files[0]->textContent();
    $file =~ s/\$CIMEROOT/$cimeroot/;
    $file =~ s/\$MODEL/$model/;
    (-f "$file")  or  die "** Cannot find machines specification file $file ***\n";

    my $model = uc $model;
    print "\n";
    print " ======================================================\n";
    print "            $model Machines:                          \n";
    print " ======================================================\n";
    print "\n";

    my $xml_machine = XML::LibXML->new( no_blanks => 1)->parse_file($file);
    foreach my $machine ($xml_machine->findnodes(".//machine")) {
	my $name = $machine->getAttribute('MACH');
	foreach my $node ($machine->findnodes("./DESC")) {
	    my $desc = $node->textContent();
	    print " $name :  \n      $desc \n";
	}
    }
}
