#!/usr/bin/env perl
use strict;
use File::Path;

#===============================================================================
# Purpose: Build csm_share library
#===============================================================================

if ($#ARGV < 2) {
    die " ERROR buildlib_csm_share: must specify a caseroot input argument @ARGV";
}
my ($sharedlibroot, $installroot, $CASEROOT) = @ARGV;

print "$sharedlibroot <> $installroot <> $CASEROOT\n";

chdir "${CASEROOT}" or die "Could not cd to \"$CASEROOT\"";

my $CIMEROOT		= `./xmlquery CIMEROOT		--value`;
my $COMP_INTERFACE	= `./xmlquery COMP_INTERFACE	--value`;
my $USE_ESMF_LIB	= `./xmlquery USE_ESMF_LIB	--value`;
my $GMAKE_J		= `./xmlquery GMAKE_J		--value`;
my $GMAKE		= `./xmlquery GMAKE		--value`;
my $CASETOOLS		= `./xmlquery CASETOOLS		--value`;
my $multi_driver  	= `./xmlquery MULTI_DRIVER       --value`;

my $NINST_ATM		= 1;
my $NINST_ICE		= 1;
my $NINST_GLC		= 1;
my $NINST_LND		= 1;
my $NINST_OCN		= 1;
my $NINST_ROF		= 1;
my $NINST_WAV		= 1;
my $NINST_ESP		= 1;

if ($multi_driver eq "FALSE") {
    $NINST_ATM		= `./xmlquery NINST_ATM		--value`;
    $NINST_ICE	        = `./xmlquery NINST_ICE		--value`;
    $NINST_GLC		= `./xmlquery NINST_GLC		--value`;
    $NINST_LND		= `./xmlquery NINST_LND		--value`;
    $NINST_OCN		= `./xmlquery NINST_OCN		--value`;
    $NINST_ROF		= `./xmlquery NINST_ROF		--value`;
    $NINST_WAV		= `./xmlquery NINST_WAV		--value`;
    $NINST_ESP		= `./xmlquery NINST_ESP		--value`;
}
my $NINST_VALUE		= `./xmlquery NINST_VALUE	--value`;
$ENV{PIO_VERSION}  	= `./xmlquery PIO_VERSION	--value`;
#--------------------------------------------------------------------
# Filepath: list of source code directories (in order of importance).
#--------------------------------------------------------------------

my $useesmf = "noesmf";
$useesmf = "esmf" if ($USE_ESMF_LIB eq "TRUE");

my $libdir = "$sharedlibroot/$COMP_INTERFACE/$useesmf/${NINST_VALUE}/csm_share";
my $installdir = "$installroot/$COMP_INTERFACE/$useesmf/${NINST_VALUE}";
print "installdir is $installdir\nlibdir is $libdir\n";
mkpath($libdir) unless -d $libdir;
chdir($libdir) or die "Could not cd to $libdir: $!\n";

my @filepath = ( "$CASEROOT/SourceMods/src.share",
		 "$CIMEROOT/src/drivers/mct/shr",
		 "$CIMEROOT/src/components/xcpl_models/xshare",
		 "$CIMEROOT/src/share/streams",
		 "$CIMEROOT/src/share/util",
		 "$CIMEROOT/src/share/RandNum/src",
		 "$CIMEROOT/src/share/RandNum/src/dsfmt_f03",
		 "$CIMEROOT/src/share/RandNum/src/kissvec",
		 "$CIMEROOT/src/share/RandNum/src/mt19937",
		 );

if($useesmf eq "noesmf"){
    push(@filepath,"$CIMEROOT/src/share/esmf_wrf_timemgr");
}else{
    push(@filepath,"$CIMEROOT/src/drivers/mct/shr_esmf");
}

my @fp;
if (-e "Filepath"){
    open(F,"Filepath");
    @fp = <F>;
    close(F);
}
# if the number of lines in @filepath is different than the number of lines in @fp then create a new Filepath file
if($#fp != $#filepath){
    open(F,">Filepath");
    foreach(@filepath){
	print F "$_\n";
    }
    close(F);
}
my $multiinst_cppdefs = "";

$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_ATM=$NINST_ATM";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_LND=$NINST_LND";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_OCN=$NINST_OCN";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_ICE=$NINST_ICE";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_GLC=$NINST_GLC";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_WAV=$NINST_WAV";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_ROF=$NINST_ROF";
$multiinst_cppdefs = "$multiinst_cppdefs -DNUM_COMP_INST_ESP=$NINST_ESP";

my $bld = "$GMAKE complib -j $GMAKE_J MODEL=csm_share COMPLIB=libcsm_share.a USER_CPPDEFS=\" $multiinst_cppdefs\" -f $CASETOOLS/Makefile ";

my $rc = system($bld);
if ($rc==0xff00){
    die "$bld failed with: $!\n";
} elsif($rc > 0x80) {
    $rc >>= 8;
    die "$bld returned non-zero exit status $rc\n";
} elsif($rc != 0) {
    print "$bld ran with ";
    if ($rc & 0x80){
	$rc &= ~0x80;
	print "coredump from ";
    }
    die "signal $rc\n";
}
if ( ! -d "$installdir/lib"){
    print "Creating installdir in $installdir\n";
    mkpath("$installdir/lib");
    mkpath("$installdir/include");
}
print "Copying libcsm_share.a to $installdir/lib\n";
system("cp -p -f libcsm_share.a $installdir/lib/");
print "Copying modules to $installdir/include\n";
system("cp -p -f *.mod $installdir/include/");
