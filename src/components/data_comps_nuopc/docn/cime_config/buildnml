#!/usr/bin/env python

"""Namelist creator for CIME's data ocn model.
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, sys, re

_CIMEROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..","..","..","..","..")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.XML.files import Files
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect, safe_copy
from CIME.buildnml import create_namelist_infile, parse_input, copy_inputs_to_rundir

logger = logging.getLogger(__name__)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelists(case, confdir, inst_string, infile, nmlgen, data_list_path):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`. The
    `inst_string` argument is used as a suffix to distinguish files for
    different instances. The `confdir` argument is used to specify the directory
    in which output files will be placed.
    """

    #----------------------------------------------------
    # Get a bunch of information from the case.
    #----------------------------------------------------
    caseroot = case.get_value("CASEROOT")
    docn_mode = case.get_value("DOCN_MODE")
    ocn_domain_file = case.get_value("OCN_DOMAIN_FILE")
    ocn_domain_path = case.get_value("OCN_DOMAIN_PATH")
    ocn_grid = case.get_value("OCN_GRID")
    atm_nx = case.get_value("ATM_NX")
    atm_ny = case.get_value("ATM_NY")
    grid = case.get_value("GRID")

    #----------------------------------------------------
    # Check for incompatible options.
    #----------------------------------------------------
    expect(ocn_grid != "null",
           "OCN_GRID cannot be null")
    expect(docn_mode != "NULL",
           "DOCN_MODE cannot be NULL")

    #----------------------------------------------------
    # Log some settings.
    #----------------------------------------------------
    logger.debug("DOCN mode is {}".format(docn_mode))
    logger.debug("DOCN grid is {}".format(ocn_grid))

    #----------------------------------------------------
    # Create docn_in and docn.streams.xml files
    #----------------------------------------------------
    config = {}
    config['grid'] = grid
    config['ocn_grid'] = ocn_grid
    config['docn_mode'] = docn_mode

    nmlgen.init_defaults(infile, config)

    # Determine if need to obtain model mask from a separate file
    ocn_nx = case.get_value("OCN_NX")
    ocn_ny = case.get_value("OCN_NY")
    if (ocn_nx == atm_nx and ocn_ny == atm_ny and "aquap" not in docn_mode):
        nmlgen.set_value("model_maskfile",os.path.join(ocn_domain_path,ocn_domain_file))

    # Determine if will create mesh by reading in a domain file
    model_meshfile = case.get_value("OCN_DOMAIN_MESH")
    if model_meshfile == 'create_mesh':
        nmlgen.set_value("model_createmesh_fromfile",os.path.join(ocn_domain_path,ocn_domain_file))

    # Set constant value sst
    if docn_mode == 'docn_aquap_constant':
        value = [case.get_value('DOCN_AQPCONST_VALUE')]
        nmlgen.set_value("sst_constant_value",value)

    # Generate docn_in
    namelist_file = os.path.join(confdir, "docn_in")
    nmlgen.write_output_file(namelist_file, data_list_path, groups=['docn_nml'])

    # Generate stream xml file if needed
    if (re.search(r'sst_aquap[0-9]+',docn_mode) is not None) or (docn_mode == 'sst_aquap_constant'):
        generate_stream_file = False
    else:
        generate_stream_file = True
    if generate_stream_file:
        # Create stream xml file - docn.streams.xml
        # first construct the list of streams - this uses the "streamlist" namelist_definition_docn.xml values
        streams = nmlgen.get_streams()
        stream_path = os.path.join(confdir, "docn.streams"+inst_string+".xml" )
        nmlgen.create_nuopc_stream_files(config, caseroot, streams, stream_path, data_list_path)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################

    # Build the component namelist and required stream xml files
    if compname != "docn":
        raise AttributeError

    rundir = case.get_value("RUNDIR")
    ninst = case.get_value("NINST_OCN")
    if ninst is None:
        ninst = case.get_value("NINST")

    # Determine configuration directory
    confdir = os.path.join(caseroot,"Buildconf",compname + "conf")
    if not os.path.isdir(confdir):
        os.makedirs(confdir)

    #----------------------------------------------------
    # Construct the namelist generator
    #----------------------------------------------------
    # determine directory for user modified namelist_definitions.xml
    user_xml_dir = os.path.join(caseroot, "SourceMods", "src." + compname)
    expect (os.path.isdir(user_xml_dir),
            "user_xml_dir {} does not exist ".format(user_xml_dir))

    # NOTE: User definition *replaces* existing definition.
    files = Files(comp_interface="nuopc")
    definition_file = [files.get_value("NAMELIST_DEFINITION_FILE", {"component":"docn"})]

    user_definition = os.path.join(user_xml_dir, "namelist_definition_docn.xml")
    if os.path.isfile(user_definition):
        definition_file = [user_definition]
    for file_ in definition_file:
        expect(os.path.isfile(file_), "Namelist XML file {} not found!".format(file_))

    # Create the namelist generator object - independent of instance
    nmlgen = NamelistGenerator(case, definition_file, files=files)

    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "docn.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    #----------------------------------------------------
    # Loop over instances
    #----------------------------------------------------
    for inst_counter in range(1, ninst+1):
        # determine instance string
        inst_string = ""
        if ninst > 1:
            inst_string = '_' + "{:04d}".format(inst_counter)

        # If multi-instance case does not have restart file, use
        # single-case restart for each instance
        rpointer = "rpointer." + compname
        if (os.path.isfile(os.path.join(rundir,rpointer)) and
            (not os.path.isfile(os.path.join(rundir,rpointer + inst_string)))):
            safe_copy(os.path.join(rundir, rpointer),
                      os.path.join(rundir, rpointer + inst_string))

        inst_string_label = inst_string
        if not inst_string_label:
            inst_string_label = "\"\""

        # create namelist output infile using user_nl_file as input
        user_nl_file = os.path.join(caseroot, "user_nl_" + compname + inst_string)
        expect(os.path.isfile(user_nl_file),
               "Missing required user_nl_file {} ".format(user_nl_file))
        infile = os.path.join(confdir, "namelist_infile")
        create_namelist_infile(case, user_nl_file, infile)
        namelist_infile = [infile]

        # create namelist and stream file(s) data component
        _create_namelists(case, confdir, inst_string, namelist_infile, nmlgen, data_list_path)

        copy_inputs_to_rundir(caseroot, compname, confdir, rundir, inst_string)

###############################################################################
def _main_func():
    # Build the component namelist and required stream xml files
    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "docn")

if __name__ == "__main__":
    _main_func()
