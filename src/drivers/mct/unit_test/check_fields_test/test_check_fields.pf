module test_check_fields

  ! Tests of check_fields in the component_type_mod, check_fields looks for NaN values
  ! in fields passed from components to the coupler

  use pfunit_mod
  use component_type_mod
  use mct_mod
  use mct_wrapper_mod, only : mct_init, mct_clean
  use avect_wrapper_mod
  use create_mapper_mod
  use shr_kind_mod, only : r8 => shr_kind_r8
  use shr_infnan_mod, only : shr_infnan_nan, assignment(=)
  implicit none

  @TestCase
  type, extends(TestCase) :: TestCheckFields
     type(component_type) :: comp
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestCheckFields

contains

  subroutine setUp(this)
    class(TestCheckFields), intent(inout) :: this

    call mct_init()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestCheckFields), intent(inout) :: this
    call mct_aVect_clean(this%comp%c2x_cc)
    call mct_clean()
  end subroutine tearDown

  @Test
  subroutine createAVectWithoutData_1Field_checkField(this)
    class(TestCheckFields), intent(inout) :: this
    character(len=*), parameter :: attr_tag = 'foo'
    integer, parameter :: lsize = 5 !
    character(len=64) :: actual_rlist
    real(r8) :: nan

    nan = shr_infnan_nan
    if(.not. associated(this%comp%c2x_cc)) allocate(this%comp%c2x_cc)
    call create_aVect_without_data(this%comp%c2x_cc, [attr_tag], lsize)

    actual_rlist = mct_aVect_exportRList2c(this%comp%c2x_cc)
    @assertEqual('foo', trim(actual_rlist))

    this%comp%c2x_cc%rattr(1,3) = nan

    this%comp%name = 'pfunittest'

    if(.not. associated(this%comp%gsmap_cc)) allocate(this%comp%gsmap_cc)

    call create_gsmap(this%comp%gsmap_cc, lsize)

    call check_fields(this%comp, 1)
    @assertExceptionRaised('ABORTED: component_mod:check_fields NaN found in pfunittest instance:    1 field foo 1d global index:        3')

  end subroutine createAVectWithoutData_1Field_checkField

  @Test
  subroutine createAVectWithoutData_3Field_checkFields(this)
    class(TestCheckFields), intent(inout) :: this
    character(len=*), parameter :: attr_tag1 = 'foo1'
    character(len=*), parameter :: attr_tag2 = 'foo2'
    character(len=*), parameter :: attr_tag3 = 'bar '
    character(len=*), parameter :: expected_rlist = 'foo1:foo2:bar'
    integer, parameter :: lsize = 5 ! not important for this test
    character(len=64) :: actual_rlist
    real(r8) :: nan

    nan = shr_infnan_nan

    this%comp%name = 'pfunittest'

    if(.not. associated(this%comp%c2x_cc)) allocate(this%comp%c2x_cc)

    call create_aVect_without_data(this%comp%c2x_cc, [attr_tag1, attr_tag2, attr_tag3], lsize)

    actual_rlist = mct_aVect_exportRList2c(this%comp%c2x_cc)
    @assertEqual(expected_rlist, actual_rlist)

    if(.not. associated(this%comp%gsmap_cc)) allocate(this%comp%gsmap_cc)

    this%comp%c2x_cc%rattr(2,3) = nan

    call create_gsmap(this%comp%gsmap_cc, lsize)

    call check_fields(this%comp, 1)

    @assertExceptionRaised('ABORTED: component_mod:check_fields NaN found in pfunittest instance:    1 field foo2 1d global index:        3')
  end subroutine createAVectWithoutData_3Field_checkFields

end module test_check_fields
