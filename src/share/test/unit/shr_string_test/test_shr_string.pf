module test_shr_string

  ! Tests of shr_string_mod

  use pfunit_mod
  use shr_string_mod

  implicit none

  integer, parameter :: list_len = 256
  character, parameter :: tab_char = char(9)

contains

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_leftAlign
  !
  ! NOTE(wjs, 2017-05-15) There is more duplication in these tests than is warranted by
  ! the simplicity of the subroutine. This is a historical artifact of when this routine
  ! handled spaces and tabs separately. Some of these tests could probably be removed in
  ! the future.
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_leftAlign_noInitialSpaces()
    ! With no initial spaces, should have no effect
    character(len=6) :: str

    str = 'foo   '
    call shr_string_leftAlign(str)
    @assertEqual('foo   ', str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_noInitialSpaces

  @Test
  subroutine test_shr_string_leftAlign_initialSpaces()
    ! Should remove initial spaces
    character(len=6) :: str

    str = '  foo '
    call shr_string_leftAlign(str)
    @assertEqual('foo   ', str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_initialSpaces

  @Test
  subroutine test_shr_string_leftAlign_interiorSpaces()
    ! Should NOT remove interior spaces
    character(len=6) :: str

    str = 'f oo  '
    call shr_string_leftAlign(str)
    @assertEqual('f oo  ', str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_interiorSpaces

  @Test
  subroutine test_shr_string_leftAlign_initialTabs()
    ! Should remove initial tabs
    character(len=6) :: str

    str = tab_char // tab_char // 'foo '
    call shr_string_leftAlign(str)
    @assertEqual('foo   ', str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_initialTabs

  @Test
  subroutine test_shr_string_leftAlign_interiorTabs()
    ! Should NOT remove interior tabs
    character(len=6) :: str, expected

    str = 'f' // tab_char // 'oo  '
    expected = str
    call shr_string_leftAlign(str)
    @assertEqual(expected, str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_interiorTabs

  @Test
  subroutine test_shr_string_leftAlign_initialSpacesAndTabs()
    ! Should remove an initial mix of spaces and tabs
    character(len=8) :: str

    str = ' ' // tab_char // ' ' // tab_char // ' ' // 'foo'
    call shr_string_leftAlign(str)
    @assertEqual('foo     ', str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_initialSpacesAndTabs

  @Test
  subroutine test_shr_string_leftAlign_allSpacesAndTabs()
    ! If string is just a mix of spaces and tabs, the resulting string should be all
    ! spaces
    character(len=6) :: str

    str = ' ' // tab_char // ' ' // tab_char // '  '
    call shr_string_leftAlign(str)
    @assertEqual('      ', str, whitespace=KEEP_ALL)
  end subroutine test_shr_string_leftAlign_allSpacesAndTabs

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listDiff
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listDiff_default()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fourth:second', &
         listout = actual)
    @assertEqual('first:third', actual)
  end subroutine test_shr_string_listDiff_default

  @Test
  subroutine test_shr_string_listDiff_oneElementList2()
    ! Make sure that it correctly handles the edge case of a single element in list2
    ! (i.e., with no delimiters).
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'third', &
         listout = actual)
    @assertEqual('first:second:fourth', actual)
  end subroutine test_shr_string_listDiff_oneElementList2

  @Test
  subroutine test_shr_string_listDiff_emptyList2()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = ' ', &
         listout = actual)
    @assertEqual('first:second:third:fourth', actual)
  end subroutine test_shr_string_listDiff_emptyList2

  @Test
  subroutine test_shr_string_listDiff_List2equalsList1()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fourth:second:first:third', &  ! same as list1, but different order
         listout = actual)
    @assertEqual(' ', actual)
  end subroutine test_shr_string_listDiff_List2equalsList1

  @Test
  subroutine test_shr_string_listDiff_elementNotInList1()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fifth', &
         listout = actual)
    @assertEqual('first:second:third:fourth', actual)
  end subroutine test_shr_string_listDiff_elementNotInList1

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listAddSuffix
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listAddSuffix_with_empty_list()
    character(len=list_len) :: actual

    call shr_string_listAddSuffix(list=' ', suffix='00', new_list=actual)
    @assertEqual(' ', actual)
  end subroutine test_shr_string_listAddSuffix_with_empty_list

  @Test
  subroutine test_shr_string_listAddSuffix_with_one_element()
    character(len=list_len) :: actual

    call shr_string_listAddSuffix(list='first', suffix='00', new_list=actual)
    @assertEqual('first00', actual)
  end subroutine test_shr_string_listAddSuffix_with_one_element

  @Test
  subroutine test_shr_string_listAddSuffix_with_multiple_elements()
    character(len=list_len) :: actual, expected

    call shr_string_listAddSuffix(list='first:second:third', suffix='00', new_list=actual)
    expected = 'first00:second00:third00'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listAddSuffix_with_multiple_elements

  @Test
  subroutine test_shr_string_listAddSuffix_with_empty_suffix()
    character(len=list_len) :: actual, expected

    call shr_string_listAddSuffix(list='first:second:third', suffix=' ', new_list=actual)
    expected = 'first:second:third'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listAddSuffix_with_empty_suffix

end module test_shr_string
